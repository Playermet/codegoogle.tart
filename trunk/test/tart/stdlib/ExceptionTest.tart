[EntryPoint]
def main(args:String[]) -> int {
  testTryBlock();
  testTryCatchBlock();
  testTryAndReturn();
  testThrowAndCatch();
  testUnwindAndCatch();
  testUnwindAndCatch2();
  testExceptionMsg();
  testNestedTry();
  testNestedTry2();
  testTryFinally();
  testTryCatchFinally();
  //testTryReturnFinally();
  return 0;
}

def throwSomething() {
  throw Exception("Message");
}

def testTryBlock() {
  var visitedTry = false;
  try {
    visitedTry = true;
  }
  
  Debug.assertTrue(visitedTry);
}

def testTryCatchBlock() {
  var visitedTry = false;
  try {
    visitedTry = true;
  } catch t:Throwable {
    Debug.fail("testTryCatchBlock: invalid catch");
  }

  Debug.assertTrue(visitedTry);
}

def testTryAndReturn() {
  try {
    return;
  } catch t:Throwable {
    Debug.fail("testTryAndReturn: invalid catch");
  }
  
  Debug.fail("return failed");
}

def testThrowAndCatch() {
  try {
    throw Exception();
    Debug.fail("exception not thrown");
  } catch t:Throwable {
    return;
  }
  
  Debug.fail("exception not caught");
}

def testUnwindAndCatch() {
  var v = false;
  try {
    throwSomething();
    Debug.fail("exception not thrown");
  } catch t:Throwable {
    Debug.assertTrue(t isa Throwable);
    Debug.assertTrue(t isa Exception);
    v = true;
  }

  Debug.assertTrue(v);
}

def testUnwindAndCatch2() {
  var v = false;
  try {
    throwSomething();
    Debug.fail("exception not thrown");
  } catch t:InvalidArgumentException {
    Debug.fail("testUnwindAndCatch2: invalid catch");
  } catch t:Throwable {
    Debug.assertTrue(t isa Throwable);
    Debug.assertTrue(t isa Exception);
    v = true;
  }

  Debug.assertTrue(v);
}

def testExceptionMsg() {
  var v = false;
  try {
    throwSomething();
    Debug.fail("exception not thrown");
  } catch e:Exception {
    Debug.assertEq("Message", e.message);
    v = true;
  }

  Debug.assertTrue(v);
}

def testNestedTry() {
  var v = false;
  try {
    try {
      throw Exception();
    } catch e:Exception {
      v = true;
    }
  } catch t:InvalidArgumentException {
    Debug.fail("testNestedTry: invalid catch InvalidArgumentException");
  } catch t:Throwable {
    Debug.fail("testNestedTry: invalid catch Throwable");
  }

  Debug.assertTrue(v);
}

def testNestedTry2() {
  var v = false;
  try {
    try {
      throw Exception();
    } catch e:InvalidArgumentException {
      Debug.fail("testNestedTry2: invalid catch 2");
    }
  } catch t:Exception {
    v = true;
  } catch t:Throwable {
    Debug.fail("testNestedTry2: invalid catch 3");
  }

  Debug.assertTrue(v);
}

def testTryFinally() {
  var visitedTry = false;
  var visitedFinally = false;
  try {
    visitedTry = true;
  } finally {
    visitedFinally = true;
  }
  
  Debug.assertTrue(visitedTry);
  Debug.assertTrue(visitedFinally);
}

def testTryCatchFinally() {
  var visitedCatch = false;
  var visitedFinally = false;
  try {
    throw Exception();
  } catch t:Exception {
    visitedCatch = true;
  } finally {
    visitedFinally = true;
  }
  
  Debug.assertTrue(visitedCatch);
  Debug.assertTrue(visitedFinally);
}

/*def testTryReturnFinally() {
  var visitedFinally = false;
  try {
    return;
  } catch t:Exception {
  } finally {
    visitedFinally = true;
  }
  
  Debug.fail("failed to return");
}
*/
