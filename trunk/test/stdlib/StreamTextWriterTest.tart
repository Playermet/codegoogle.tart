import tart.testing.Test;
import tart.io.MemoryStream;
import tart.io.StreamTextWriter;

@EntryPoint
def main(args:String[]) -> int32 {
  return Test.run(StreamTextWriterTest);
}

class StreamTextWriterTest : Test {
  var mstream:MemoryStream;
  var writer:StreamTextWriter;

  override setUp {
    super();
    mstream = MemoryStream();
    writer = StreamTextWriter(mstream);
  }

  def testConstruct {
    assertEq("UTF8", writer.encoder.name);
  }

  def testWriteCharArray {
    writer.write("Hello".toCharArray()).flush();
    assertEq("Hello", String.fromBytes(mstream.data));

    writer.write("x, x".toCharArray(), 1, 2).flush();
    assertEq("Hello, ", String.fromBytes(mstream.data));
  }

  def testWriteCharArrayNoFlush {
    writer.write("Hello".toCharArray()).write(", World!".toCharArray()).flush();
    assertEq("Hello, World!", String.fromBytes(mstream.data));
  }

  def testWriteString {
    writer.write("Hello").flush();
    assertEq("Hello", String.fromBytes(mstream.data));
  }

  def testWriteStringList {
    writer.write("Hello", ", World", "!").flush();
    assertEq("Hello, World!", String.fromBytes(mstream.data));
  }

  def testWriteLnString {
    writer.writeLn("Hello").flush();
    assertEq("Hello\n", String.fromBytes(mstream.data));
  }

  def testWriteLnStringList {
    writer.writeLn("Hello", ", World", "!").flush();
    assertEq("Hello, World!\n", String.fromBytes(mstream.data));
  }

  def testWriteFmtString {
    writer.writeFmt("Hello {0}!", "World").flush();
    assertEq("Hello World!", String.fromBytes(mstream.data));
  }

  def testWriteLnFmtString {
    writer.writeLnFmt("Hello {0}!", "World").flush();
    assertEq("Hello World!\n", String.fromBytes(mstream.data));
  }
}
