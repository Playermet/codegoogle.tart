import tart.reflect.Module;
import tart.testing.TestUtils;
import tart.collections.Iterators;

@EntryPoint
def main(args: String[]) -> int32 {
  return TestUtils.runModuleTests(Module.thisModule());
}

class Counter : Iterator[int32] {
  private var value:int32;
  private var end:int32;
  
  def construct(end:int32) {
    self.value = 0;
    self.end = end;
  }
  
  def next -> int32 or void {
    if (self.value < self.end) {
      return self.value++;
    } else {
      return;
    }
  }
}

def testManualIteration() {
  let ctr = Counter(5);
  Debug.assertTrue(ctr.next() isa int32);
  Debug.assertTrue(ctr.next() isa int32);
  Debug.assertTrue(ctr.next() isa int32);
  Debug.assertTrue(ctr.next() isa int32);
  Debug.assertTrue(ctr.next() isa int32);
  Debug.assertFalse(ctr.next() isa int32);
}

def testManualIteration2() {
  expect2(1, 2);
}

def expect2(values:int32...) {
  let ctr = values.iterate();
  Debug.assertTrue(ctr.next() isa int32);
  Debug.assertTrue(ctr.next() isa int32);
  Debug.assertFalse(ctr.next() isa int32);
}

def testForeach() {
  var sum = 0;
  for i in Counter(5) {
    sum += 1;
    Debug.assertTrue(sum < 6);
  }

  Debug.assertEq(5, sum);
}

def testIteratorEqual() {
  Debug.assertTrue(Iterators.equal([1, 2, 3], [1, 2, 3]));
  Debug.assertFalse(Iterators.equal([1, 2, 3], [1, 2, 4]));
  Debug.assertFalse(Iterators.equal([1, 2, 3], [1, 2, 3, 4]));
  Debug.assertFalse(Iterators.equal([1, 2, 3], [1, 2]));
}

def testForeach2() {
  Debug.assertEq(5, sum(1,2,2));
  Debug.assertEq(10, sum(1,5,4));
}

def sum(nums:int32...) -> int32 {
  var sum = 0;
  for i in nums {
    sum += i;
  }
  
  return sum;
}
