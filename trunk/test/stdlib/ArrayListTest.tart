import tart.collections.ArrayList;
import tart.collections.ImmutableList;
import tart.testing.Test;

@EntryPoint
def main(args:String[]) -> int32 {
  return Test.run(ArrayListTest);
}

class ArrayListTest : Test {
  def testConstruct() {
    let a = ArrayList[int32](1, 2, 3);
    assertEq(3, a.size);
    assertEq(1, a[0]);
    assertEq(2, a[1]);
    assertEq(3, a[2]);
  }

  def testImplicitType() {
    let a = ArrayList(1, 2, 3);
    assertEq(3, a.size);
    assertEq(1, a[0]);
    assertEq(2, a[1]);
    assertEq(3, a[2]);
  }

	def testOutOfRange() {
	  let a = ArrayList[int32](1, 2, 3);
	  try {
	    let s = a[4];
	    fail("Out of range access");
	  } catch :IndexError {
	  }

	  try {
	    let s = a[-1];
	    fail("Out of range access");
	  } catch :IndexError {
	  }
	}

	def testAdd() {
	  let a = ArrayList[int32](1, 2, 3);
	  a.add(4);
	  assertEq(4, a.size);
	  assertEq(1, a[0]);
	  assertEq(2, a[1]);
	  assertEq(3, a[2]);
	  assertEq(4, a[3]);
	}

  def testAddAll() {
    let a = ArrayList[int32](1, 2, 3);
    a.addAll(Array.of(4, 5, 6));
    assertEq(6, a.size);
    assertEq(1, a[0]);
    assertEq(2, a[1]);
    assertEq(3, a[2]);
    assertEq(4, a[3]);
    assertEq(5, a[4]);
    assertEq(6, a[5]);
  }

  def testInsert() {
    let a = ArrayList[int32](1, 2, 3);
    a.insert(1, 4);
    assertEq(4, a.size);
    assertEq(1, a[0]);
    assertEq(4, a[1]);
    assertEq(2, a[2]);
    assertEq(3, a[3]);
  }

  def testInsertAll() {
    let a = ArrayList[int32](1, 2, 3);
    a.insertAll(1, Array.of(4, 5, 6));
    assertEq(6, a.size);
    assertEq(1, a[0]);
    assertEq(4, a[1]);
    assertEq(5, a[2]);
    assertEq(6, a[3]);
    assertEq(2, a[4]);
    assertEq(3, a[5]);
  }

	def testRemove() {
	  let a = ArrayList[int32](1, 2, 3);
	  a.remove(1);
	  assertEq(2, a.size);
	  assertEq(1, a[0]);
	  assertEq(3, a[1]);
	}

  def testCopy() {
    let a = ArrayList.copyOf(ImmutableList.of(1, 2, 3));
    assertEq(3, a.size);
    assertEq(1, a[0]);
    assertEq(2, a[1]);
    assertEq(3, a[2]);
  }
}
