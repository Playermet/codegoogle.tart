import tart.reflect.Module;
import tart.reflect.Method;

@EntryPoint
def main(args:String[]) -> int {
  testModuleReflection();
  testModuleMethods();
  testFindMethod();
  testCallMethod();
  return 0;
}

def testModuleReflection() {
  let m = Module.thisModule();
  Debug.assertEq("ReflectionTest", m.name);
  Debug.assertEq(0, m.types.length);
  Debug.assertEq(7, m.methods.length);
}

def testModuleMethods() {
  let m = Module.thisModule();
  var foundSample = false;
  for method in m.methods {
    if method.name == "sample" {
      foundSample = true;
    }
  } 

  Debug.assertTrue(foundSample);
}

def testFindMethod() {
  let m = Module.thisModule();
  let f1 = m.findMethod("sample");
  Debug.assertTrue(f1 isa Method);
  let f2 = m.findMethod("ample");
  Debug.assertFalse(f2 isa Method);
}

def sample() {
}

def testCallMethod() {
  let m = Module.thisModule();
  let method = typecast[Method](m.findMethod("sample2"));
	savedValue = 0;
	method.call(88, 77);
	Debug.assertEq(77, savedValue);
}

var savedValue:int;

def sample2(arg:int) {
  savedValue = arg;
}
