import tart.reflect.Module;
import tart.reflect.Method;
import tart.reflect.Type;
import tart.reflect.CompositeType;
import tart.reflect.PrimitiveType;
import tart.reflect.Reflect;
import tart.testing.Test;

@EntryPoint
def main(args:String[]) -> int32 {
  return Test.run(ReflectionTest);
}

var savedValue:int32;

@Reflect def sample() {
}

@Reflect def sample2(arg:int32) {
  savedValue = arg;
}

@Attribute(Attribute.Target.ANY, Attribute.Retention.RUNTIME)
class RetainedAttr {
}

@Reflect class TestClass {
  var dataField:int;

  // No-arg constructor
  def construct {
    dataField = 3;
  }

  // Single-arg constructor
  def construct(s:String) {
    dataField = 4;
  }

  @RetainedAttr def square(arg:int32) -> int32 {
    return arg * arg;
  }

  override toString -> String {
    return "TestClass";
  }

  def toCharArray(start:int = 0, count:int = int.maxVal) -> char[] {
    return char[](0);
  }
}

class ReflectionTest : Test {
	def testModuleReflection() {
	  let m = Module.thisModule();
	  assertEq("ReflectionTest", m.name);
	  assertEq("ReflectionTest", m.qualifiedName);
	  assertEq("", m.packageName);
	  assertEq(2, m.types.size);
	  //assertEq(3, m.methods.size);
	}

	def testModuleQualifiedName() {
	  let m = Module.of(String);
	  assertEq("String", m.name);
	  assertEq("tart.core.String", m.qualifiedName);
	  assertEq("tart.core", m.packageName);
	}

	def testModuleMethods() {
	  let m = Module.thisModule();
	  var foundSample = false;
	  for method in m.methods {
	    if method.name == "sample" {
	      foundSample = true;
	    }
	  }

	  assertTrue(foundSample);
	}

	def testFindMethod() {
	  let m = Module.thisModule();
	  let f1 = m.findMethod("sample");
	  assertTrue(f1 isa Method);
	  let f2 = m.findMethod("ample");
	  assertFalse(f2 isa Method);
	}

	def testCallMethod() {
	  let m = Module.thisModule();
	  let method = typecast[Method](m.findMethod("sample2"));
		savedValue = 0;
		method.call(m, 77);
		assertEq(77, savedValue);
	}

	def testFindClass() {
	  let ty:Type = Type.of(TestClass);
	  //assertEq("tart.reflect.CompositeType", ty.__typeName);
	  assertEq(Type.TypeKind.CLASS, ty.typeKind);
	  assertTrue(ty isa CompositeType);
	}

	def testCallInstanceMethod() {
	  let ty:Type = Type.of(TestClass);
	  let ct = typecast[CompositeType](ty);
	  let method = typecast[Method](ct.findMethod("square"));
	  let tclass = TestClass();
	  assertEq(484, typecast[int32](method.call(tclass, 22)));
	}

  def testConstruct() {
    let ty:Type = Type.of(TestClass);
    let ct = typecast[CompositeType](ty);
    let method = typecast[Method](ct.findMethod("square"));
    let tclass = typecast[TestClass](ct.create());
    assertEq(484, typecast[int32](method.call(tclass, 22)));
  }

  def testConstructWithArg() {
    let ty:CompositeType = CompositeType.of(TestClass);
    let ctor = ty.constructors[1];

    let tclass = typecast[TestClass](ty.create(ctor, "Hello"));

    //let method = typecast[Method](ty.findMethod("square"));
    //assertEq(484, typecast[int32](method.call(tclass, 22)));
  }

  def testSubclassTest() {
    assertTrue(CompositeType.of(ReflectionTest).isSubclass(Test));
    assertFalse(CompositeType.of(Test).isSubclass(ReflectionTest));
  }

  def testRetainedAttribute {
    let ty:Type = Type.of(TestClass);
    let ct = typecast[CompositeType](ty);
    let method = typecast[Method](ct.findMethod("square"));
    assertEq(1, method.attributes.size);
    let attr = method.findAttribute(RetainedAttr);
    assertTrue(attr isa RetainedAttr);
    let attr2 = method.findAttribute(String);
    assertFalse(attr isa String);
    //assertEq(null, attr);
  }

  def testTypeOfStringClass {
    let ty = CompositeType.of(String);
	  assertEq("String", ty.name);
	  assertEq("tart.core", ty.scopeName);
	  assertEq("tart.core.String", ty.qualifiedName);
	  var st = ty.supertype;
	  assertEq("Object", ty.supertype.name);

		// String is not reflected, so this should return null.
	  let method = ty.findMethod("toString");
	  assertNull(method);
  }

  def testTypeOfTestClass {
    let ty = CompositeType.of(TestClass);
	  assertEq("TestClass", ty.name);
	  var st = ty.supertype;
	  assertEq("Object", ty.supertype.name);

	  let method = ty.findMethod("toString");
	  assertNotNull(method);
	  assertEq("tart.core.String", method.functionType.returnType.toString());
	  assertEq(0, method.functionType.paramTypes.size);
  }

  def testTypeOfStringInstance {
    let ty = "".type;
	  assertEq("String", ty.name);
	  assertEq("tart.core", ty.scopeName);
	  assertEq("tart.core.String", ty.qualifiedName);
	  assertEq("Object", ty.supertype.name);
  }

  def testTypeOfToCharArray {
    let ty = CompositeType.of(TestClass);
	  let method = ty.findMethod("toCharArray");
	  assertNotNull(method);

	  // Return type
	  assertEq("tart.core.Array", method.functionType.returnType.toString());
	  assertEq(Type.TypeKind.CLASS, method.functionType.returnType.typeKind);

	  // Param types
	  assertEq(2, method.functionType.paramTypes.size);
	  assertTrue(method.functionType.paramTypes[0] isa PrimitiveType);
	  assertTrue(method.functionType.paramTypes[0].toString().startsWith("int"));
	  assertTrue(method.functionType.paramTypes[0].isIntegerType);
	  assertTrue(method.functionType.paramTypes[1] isa PrimitiveType);
	  assertTrue(method.functionType.paramTypes[1].toString().startsWith("int"));
	  assertTrue(method.functionType.paramTypes[1].isIntegerType);
  }

  def testVoidType {
    // void
    assertTrue(Type.of(void).isVoidType);
    assertFalse(Type.of(void).isNullType);
    assertFalse(Type.of(void).isBooleanType);
    assertFalse(Type.of(void).isCharType);
    assertFalse(Type.of(void).isIntegerType);
    assertFalse(Type.of(void).isSignedIntegerType);
    assertFalse(Type.of(void).isUnsignedIntegerType);
    assertFalse(Type.of(void).isFloatType);
  }

  def testNullType {
    // Null
    assertFalse(Type.of(Null).isVoidType);
    assertTrue(Type.of(Null).isNullType);
    assertFalse(Type.of(Null).isBooleanType);
    assertFalse(Type.of(Null).isCharType);
    assertFalse(Type.of(Null).isIntegerType);
    assertFalse(Type.of(Null).isSignedIntegerType);
    assertFalse(Type.of(Null).isUnsignedIntegerType);
    assertFalse(Type.of(Null).isFloatType);
  }

  def testBoolType {
    // bool
    assertFalse(Type.of(bool).isVoidType);
    assertFalse(Type.of(bool).isNullType);
    assertTrue(Type.of(bool).isBooleanType);
    assertFalse(Type.of(bool).isCharType);
    assertFalse(Type.of(bool).isIntegerType);
    assertFalse(Type.of(bool).isSignedIntegerType);
    assertFalse(Type.of(bool).isUnsignedIntegerType);
    assertFalse(Type.of(bool).isFloatType);
  }

  def testCharType {
    // char
    assertFalse(Type.of(char).isVoidType);
    assertFalse(Type.of(char).isNullType);
    assertFalse(Type.of(char).isBooleanType);
    assertTrue(Type.of(char).isCharType);
    assertTrue(Type.of(char).isIntegerType);
    assertFalse(Type.of(char).isSignedIntegerType);
    assertTrue(Type.of(char).isUnsignedIntegerType);
    assertFalse(Type.of(char).isFloatType);
  }

  def testSignedIntegerTypes {
    // int8
    assertFalse(Type.of(int8).isVoidType);
    assertFalse(Type.of(int8).isNullType);
    assertFalse(Type.of(int8).isBooleanType);
    assertFalse(Type.of(int8).isCharType);
    assertTrue(Type.of(int8).isIntegerType);
    assertTrue(Type.of(int8).isSignedIntegerType);
    assertFalse(Type.of(int8).isUnsignedIntegerType);
    assertFalse(Type.of(int8).isFloatType);

    // int16
    assertFalse(Type.of(int16).isVoidType);
    assertFalse(Type.of(int16).isNullType);
    assertFalse(Type.of(int16).isBooleanType);
    assertFalse(Type.of(int16).isCharType);
    assertTrue(Type.of(int16).isIntegerType);
    assertTrue(Type.of(int16).isSignedIntegerType);
    assertFalse(Type.of(int16).isUnsignedIntegerType);
    assertFalse(Type.of(int16).isFloatType);

    // int32
    assertFalse(Type.of(int32).isVoidType);
    assertFalse(Type.of(int32).isNullType);
    assertFalse(Type.of(int32).isBooleanType);
    assertFalse(Type.of(int32).isCharType);
    assertTrue(Type.of(int32).isIntegerType);
    assertTrue(Type.of(int32).isSignedIntegerType);
    assertFalse(Type.of(int32).isUnsignedIntegerType);
    assertFalse(Type.of(int32).isFloatType);

    // int64
    assertFalse(Type.of(int64).isVoidType);
    assertFalse(Type.of(int64).isNullType);
    assertFalse(Type.of(int64).isBooleanType);
    assertFalse(Type.of(int64).isCharType);
    assertTrue(Type.of(int64).isIntegerType);
    assertTrue(Type.of(int64).isSignedIntegerType);
    assertFalse(Type.of(int64).isUnsignedIntegerType);
    assertFalse(Type.of(int64).isFloatType);

    // int
    assertFalse(Type.of(int).isVoidType);
    assertFalse(Type.of(int).isNullType);
    assertFalse(Type.of(int).isBooleanType);
    assertFalse(Type.of(int).isCharType);
    assertTrue(Type.of(int).isIntegerType);
    assertTrue(Type.of(int).isSignedIntegerType);
    assertFalse(Type.of(int).isUnsignedIntegerType);
    assertFalse(Type.of(int).isFloatType);
  }

  def testUnsignedIntegerTypes {
    // uint8
    assertFalse(Type.of(uint8).isVoidType);
    assertFalse(Type.of(uint8).isNullType);
    assertFalse(Type.of(uint8).isBooleanType);
    assertFalse(Type.of(uint8).isCharType);
    assertTrue(Type.of(uint8).isIntegerType);
    assertFalse(Type.of(uint8).isSignedIntegerType);
    assertTrue(Type.of(uint8).isUnsignedIntegerType);
    assertFalse(Type.of(uint8).isFloatType);

    // uint16
    assertFalse(Type.of(uint16).isVoidType);
    assertFalse(Type.of(uint16).isNullType);
    assertFalse(Type.of(uint16).isBooleanType);
    assertFalse(Type.of(uint16).isCharType);
    assertTrue(Type.of(uint16).isIntegerType);
    assertFalse(Type.of(uint16).isSignedIntegerType);
    assertTrue(Type.of(uint16).isUnsignedIntegerType);
    assertFalse(Type.of(uint16).isFloatType);

    // uint32
    assertFalse(Type.of(uint32).isVoidType);
    assertFalse(Type.of(uint32).isNullType);
    assertFalse(Type.of(uint32).isBooleanType);
    assertFalse(Type.of(uint32).isCharType);
    assertTrue(Type.of(uint32).isIntegerType);
    assertFalse(Type.of(uint32).isSignedIntegerType);
    assertTrue(Type.of(uint32).isUnsignedIntegerType);
    assertFalse(Type.of(uint32).isFloatType);

    // uint64
    assertFalse(Type.of(uint64).isVoidType);
    assertFalse(Type.of(uint64).isNullType);
    assertFalse(Type.of(uint64).isBooleanType);
    assertFalse(Type.of(uint64).isCharType);
    assertTrue(Type.of(uint64).isIntegerType);
    assertFalse(Type.of(uint64).isSignedIntegerType);
    assertTrue(Type.of(uint64).isUnsignedIntegerType);
    assertFalse(Type.of(uint64).isFloatType);

    // uint
    assertFalse(Type.of(uint).isVoidType);
    assertFalse(Type.of(uint).isNullType);
    assertFalse(Type.of(uint).isBooleanType);
    assertFalse(Type.of(uint).isCharType);
    assertTrue(Type.of(uint).isIntegerType);
    assertFalse(Type.of(uint).isSignedIntegerType);
    assertTrue(Type.of(uint).isUnsignedIntegerType);
    assertFalse(Type.of(uint).isFloatType);
  }

  def testFloatTypes {
    // float
    assertFalse(Type.of(float).isVoidType);
    assertFalse(Type.of(float).isNullType);
    assertFalse(Type.of(float).isBooleanType);
    assertFalse(Type.of(float).isCharType);
    assertFalse(Type.of(float).isIntegerType);
    assertFalse(Type.of(float).isSignedIntegerType);
    assertFalse(Type.of(float).isUnsignedIntegerType);
    assertTrue(Type.of(float).isFloatType);

    // double
    assertFalse(Type.of(double).isVoidType);
    assertFalse(Type.of(double).isNullType);
    assertFalse(Type.of(double).isBooleanType);
    assertFalse(Type.of(double).isCharType);
    assertFalse(Type.of(double).isIntegerType);
    assertFalse(Type.of(double).isSignedIntegerType);
    assertFalse(Type.of(double).isUnsignedIntegerType);
    assertTrue(Type.of(double).isFloatType);
  }

  def testNonClassTypes {
//    assertTrue(Type.of(TypeLiteral[int[]]()) isa CompositeType);
  }

  def testFieldReflection {
    let test = TestClass();
    let testType = test.type;
  }
}
