import tart.testing.Test;

@EntryPoint
def main(args:String[]) -> int32 {
  return Test.run(ArrayTest);
}

class ArrayTest : Test {
	def testZeroLengthArray() {
	  let a = int32[](0);
	  assertTrue(a.isEmpty);
	  assertTrue(a.size == 0);
	  let a2:int32[] = [];
	  assertTrue(a2.isEmpty);
	  assertTrue(a2.size == 0);
	}
	
	def testSimpleArray() {
	  let a = int32[](5);
	  assertFalse(a.isEmpty);
	  assertEq(5, a.size);
	
	  a[0] = 22;
	  assertEq(22, a[0]);
	
	  let b = Array[int32](5);
	  assertFalse(b.isEmpty);
	  assertEq(5, b.size);
	
	  //let c:Array[int32] = Array(5);
	  //assertFalse(c.isEmpty);
	  //assertTrue(c.size == 5);
	
	  let d = Array[String](5);
	  assertFalse(d.isEmpty);
	  assertEq(5, d.size);
	}
	
	def testArrayOf() {
	  let a = Array.of(1, 2, 3);
	  assertEq(1, a[0]);
	  assertEq(2, a[1]);
	  assertEq(3, a[2]);
	}
	
	def testArrayLiteral() {
	  let a = [1, 2, 3];
	  assertEq(1, a[0]);
	  assertEq(2, a[1]);
	  assertEq(3, a[2]);
	}
	
	def testArrayCopy() {
	  let a = [1, 2, 3];
	  let b = a.copy();
	  assertFalse(a is b);
	  assertEq(1, b[0]);
	  assertEq(2, b[1]);
	  assertEq(3, b[2]);
	}
	
	// TODO: Check for out of bounds exceptions, once exceptions are actually working.
	/*
	@EntryPoint
	def main() {
	  var a:Array<int32> = Array.<int32>(4);
	  assert(a.size == 4);
	  
	  var aa:Array<byte> = byte[4];
	  assert(aa.size == 4);
	  
	  a[0] = 22;
	  assert(a[0] == 22);
	
	  var b = Array.<int32>(a);
	  assert(b[0] == 22);
	
	  // Array mutation
	  b[0] = 13;
	  assert(b[0] == 13);
	  assert(a[0] == 22);
	
	  // Array literal
	/*  let c = [5, 6, 7];
	  assert(c[0] == 5);
	  assert(c[1] == 6);
	  assert(c[2] == 7);
	  assert(c.size == 3);
	
	  // Array literal with explicit type
	  let d:int32[] = [5, 6, 7];
	  assert(d.size == 3);
	
	  // Array of strings
	  let e = ["abc", "def", "zzz"];
	  assert(e.size == 3);
	  assert(e[0][0] == 'a');
	
	  // Array of mixed types
	  let f = [int64(1), uint(2), 3];
	  assert(f[0] == int64(1));
	  assert(f[1] == int64(2));
	  assert(f[2] == int64(3));
	  assert(f.size == 3);
	
	  // Array of arrays
	  let g = [[1, 2, 3], [4, 5, 6]];
	
	  assert(g.size == 2);
	  assert(g[0].size == 3);
	  assert(g[1].size == 3);
	  assert(g[0][0] == 1);
	  assert(g[0][1] == 2);
	  assert(g[0][2] == 3);
	  assert(g[1][0] == 4);
	  assert(g[1][1] == 5);
	  assert(g[1][2] == 6);
	
	  // Zero-size array
	  let h:int32[] = [];
	  assert(h.size == 0);
	  
	  let i:float[] = [];
	  assert(i.size == 0);
	  
	  // Array copy test
	  let j:int32[] = int32[3];
	  Array.copy(c, 0, j, 0, 3);
	  assert(j[0] == 5);
	  assert(j[1] == 6);
	  assert(j[2] == 7);*/
}
