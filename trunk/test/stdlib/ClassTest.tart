import tart.testing.Test;

@EntryPoint
def main(args:String[]) -> int {
  return Test.run(ClassTest);
}

public macro mtest(i:int) -> int {
  return i + i;
}

class ClassTest : Test {
  var t:TestClass;
  var t2:TestClass;
  var t3:TestClass;
  
  def construct() {}
  
  override setUp() {
	  // Test default constructor with no arguments.
	  t = TestClass();
	
	  // Test default constructor with a positional argument.
	  t2 = TestClass(1);
	
	  // Test default constructor with a keyword argument.
	  t3 = TestClass(m0=1);
  }
  
  def testCallMethod() {
    // Call a method of the class.
    var s = t.testMethod();
    assertEq(11, s);

    var m:short = t.test2();
    assertEq(18, m);
  }
  
  def testConstructSubclass() {
	  // Construct a subclass with an explicit constructor
	  let u = SubClass();
	
	  // Call a method of the subclass which is defined in the base class.
	  let v = u.testMethod();
	  
	  let w:TestClass = u;
	  let x = w.testMethod();
	  assertEq(13, x);

	  // Test reference equality
	  assertFalse(t3 is u);
	
	  // 'isa' test - failure
	  assertFalse(t isa SubClass);
	
	  // 'isa' test - success
	  assertFalse(not (t isa TestClass));
	  
	  let a = cond(true, 10, 20);

	  //return mtest(20) - 40;
  }

	def testCallSuper() {
	  let u = SubClass();
	  Debug.assertEq(34, u.test4());
	}
}

class TestClass {
  public var m0:int;

  public def testMethod() -> int {
    return 11;
  }

  public final def test2() -> short {
    return self.test3() + self.test3();
  }

  public final def test3() -> byte {
    return 9;
  }
  
  public def test4() -> byte {
    return 33;
  }
}

class SubClass : TestClass {
  private var m2:int;
  //private var m1:int[];
  
  public override testMethod() -> int {
    return 13;
  }
  
  public def construct() {
    self.m2 = 20;
  }
  
  public override test4() -> byte {
    return super() + 1;
  }
}
