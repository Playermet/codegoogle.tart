import tart.reflect.Module;
import tart.testing.Test;

@EntryPoint
def main(args:String[]) -> int32 {
  return Test.run(FunctionTest);
}

def func(a:int32, b="Hello") -> int32 {
  return a;
}

class FunctionTest : Test {
	def testDefaultArgs() {
	  assertEq(1, func(1, "Hello"));
	  assertEq(1, func(1));
	}
	
	def testFunctionVar {
	  var streq:fn s:String -> bool;
	  streq = "Hello".equals;
	  assertTrue(streq("Hello"));
	  assertFalse(streq("Yello"));
	}
	
	def testAnonFn {
	  let f = fn (i:int32) -> int32 {
	    return i + i;
	  };
	  
	  assertEq(2, f(1));
	  assertEq(4, f(2));
	}

	def testClosureWithLet {
	  let a = "A";
	  let f = fn (b:String) -> String {
	    return String.concat(a, b);
	  };
	  
	  assertEq("AB", f("B"));
	  assertEq("AC", f("C"));
	}

	def testClosureWithVar {
	  var a = "A";
	  let f = fn (b:String) -> String {
	    return String.concat(a, b);
	  };
	  
	  assertEq("AB", f("B"));
	  a = "AA";
	  assertEq("AAB", f("B"));
	}
	
	def testClosureCounter {
	  var a = 0;
	  let f = fn -> int {
	    return a++;
	  };

	  assertEq(0, f());
	  assertEq(1, f());
	  assertEq(2, f());
	  assertEq(3, a);
	}

	def returnClosure(a:String) -> fn :String -> String {
	  var s = a;
	  return fn (b:String) -> String {
	    return String.concat(s, b);
	  };
	}

	def testClosureReturnVal {
	  let f = returnClosure("A");
	  assertEq("AB", f("B"));
	  assertEq("AC", f("C"));
	}
	
	def makeCounter(n:int) -> fn -> int {
	  return fn -> int {
	    return n++;
	  };
	}

	def testClosureWithParamVar {
	  let f = makeCounter(10);
	  assertEq(10, f());
	  assertEq(11, f());
	  assertEq(12, f());
	}
	
	def testMultipleClosuresInOneScope {
	  var a = 0;
	  let f1 = fn -> int {
	    a += 1;
	    return a;
	  };

	  let f2 = fn -> int {
	    a += 10;
	    return a;
	  };

	  assertEq(1, f1());
	  assertEq(11, f2());
	  assertEq(12, f1());
	  assertEq(22, f2());
	}
	
	def callTenTimes(f:fn) {
	  for i = 0; i < 10; ++i {
	    f();
	  }
	}
	
	def testClosureAsParam {
	  var i = 0;
	  callTenTimes(fn { i += 2; });
	  assertEq(20, i);

	  var s = StringBuilder();
	  callTenTimes(fn { s.append("A"); });
	  assertEq("AAAAAAAAAA", s.toString());
	}

	def testNestedClosures {
	  let makeCounter = fn n:int -> fn -> int {
	    return fn -> int {
	      return n++;
	    };
	  };
	  
	  let c = makeCounter(2);
	  assertEq(2, c());
	  assertEq(3, c());
	}
	
	def testNestedClosures2 {
	  var i = 0;
	  let makeCounter = fn -> fn -> int {
	    return fn -> int {
	      return i++;
	    };
	  };

	  let c = makeCounter();
	  let d = makeCounter();

	  assertEq(0, c());
	  assertEq(1, c());
	  assertEq(2, d());
	  assertEq(3, d());
	}
	
  struct LargeStruct {
    var a:int;
    var b:int;
    var c:int;
    var d:int;

    def construct() {
      a = 0;
      b = 1;
      c = 2;
      d = 3;
    }
  }

/*	def testClosuresWithLargerTypes {
	  var ls = LargeStruct();
	  let f = fn -> int {
	    return ls.c++;
	  };

	  assertEq(2, f());
	  assertEq(3, ls.c);
	  assertEq(3, f());
	  assertEq(4, ls.c);
	  assertEq(4, f());
	} */

	// Test closures with tuples, structs
	// Test closures interoperable as bound methods
}
