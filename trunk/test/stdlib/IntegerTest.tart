@EntryPoint
def main(args: String[]) -> int {
  integerLimitsTest();
  integerLimitsNonConstTest();
  integerToStringTest();
  testSignExtension();
  testZeroExtension();
  return 0;
}

def integerToStringTest() {
  Debug.assertEq("1", byte(1).toString());
  Debug.assertEq("10", byte(10).toString());
  Debug.assertEq("127", byte(127).toString());
  Debug.assertEq("-128", byte(128).toString());
  Debug.assertEq("-128", byte(-128).toString());

  Debug.assertEq("1", short(1).toString());
  Debug.assertEq("10", short(10).toString());
  Debug.assertEq("3000", short(3000).toString());

  Debug.assertEq("1", int(1).toString());
  Debug.assertEq("10", int(10).toString());

  Debug.assertEq("1", long(1).toString());
  Debug.assertEq("10", long(10).toString());

  Debug.assertEq("1", ubyte(1).toString());
  Debug.assertEq("10", ubyte(10).toString());
  Debug.assertEq("255", ubyte(255).toString());

  Debug.assertEq("1", ushort(1).toString());
  Debug.assertEq("10", ushort(10).toString());

  Debug.assertEq("1", uint(1).toString());
  Debug.assertEq("10", uint(10).toString());

  Debug.assertEq("1", ulong(1).toString());
  Debug.assertEq("10", ulong(10).toString());

  Debug.assertEq("A", char(65).toString());
  //Debug.assertEq("A", String(ubyte[].of(65)));

  //Debug.assertEq("10", uintptr(10).toString());
}

def integerLimitsTest() {
  Debug.assertEq(-0x80, byte.minVal);
  Debug.assertEq(-0x8000, short.minVal);
  Debug.assertEq(-0x80000000, int.minVal);
  Debug.assertEq(-0x8000000000000000, long.minVal);

  Debug.assertEq(0x7f, byte.maxVal);
  Debug.assertEq(0x7fff, short.maxVal);
  Debug.assertEq(0x7fffffff, int.maxVal);
  Debug.assertEq(0x7fffffffffffffff, long.maxVal);

  Debug.assertEq(0, ubyte.minVal);
  Debug.assertEq(0, ushort.minVal);
  Debug.assertEq(0, uint.minVal);
  Debug.assertEq(0, ulong.minVal);

  Debug.assertEq(0xff, ubyte.maxVal);
  Debug.assertEq(0xffff, ushort.maxVal);
  Debug.assertEq(0xffffffff, uint.maxVal);
  Debug.assertEq(0xffffffffffffffff, ulong.maxVal);

  Debug.assertEq(0, char.minVal);
  Debug.assertEq(0xffffffff, char.maxVal);
}

def integerLimitsNonConstTest() {
  assertEq(-0x80, byte.minVal);
  assertEq(-0x8000, short.minVal);
  assertEq(-0x80000000, int.minVal);
  assertEq(-0x8000000000000000, long.minVal);

  assertEq(0x7f, byte.maxVal);
  assertEq(0x7fff, short.maxVal);
  assertEq(0x7fffffff, int.maxVal);
  assertEq(0x7fffffffffffffff, long.maxVal);

  assertEq(0, ubyte.minVal);
  assertEq(0, ushort.minVal);
  assertEq(0, uint.minVal);
  assertEq(0, ulong.minVal);

  assertEq(0xff, ubyte.maxVal);
  assertEq(0xffff, ushort.maxVal);
  assertEq(0xffffffff, uint.maxVal);
  assertEq(0xffffffffffffffff, ulong.maxVal);

  assertEq(0, char.minVal);
  assertEq(0xffffffff, char.maxVal);
}

// A non-macro version of assertEq, so we can test the non-const version.
def assertEq[%T](a:T, b:T) {
  if a != b {
    Debug.fail(a.toString(), " != ", b.toString());
  }
  if not (a == b) {
    Debug.fail("not ", a.toString(), " == ", b.toString());
  }
}

def testSignExtension() {
  Debug.assertEq(1, int32(int8(1)));
  Debug.assertEq(127, int32(int8(127)));
  Debug.assertEq(-1, int32(int8(-1)));
  Debug.assertEq(-128, int32(int8(-128)));

  Debug.assertEq(1, int32(int16(1)));
  Debug.assertEq(127, int32(int16(127)));
  Debug.assertEq(-1, int32(int16(-1)));
  Debug.assertEq(-128, int32(int16(-128)));

  Debug.assertEq(1, int64(int32(1)));
  Debug.assertEq(127, int64(int32(127)));
  Debug.assertEq(-1, int64(int32(-1)));
  Debug.assertEq(-128, int64(int32(-128)));
}

def testZeroExtension() {
  Debug.assertEq(1, uint32(uint8(1)));
  Debug.assertEq(127, uint32(uint8(127)));

  Debug.assertEq(1, uint32(uint16(1)));
  Debug.assertEq(127, uint32(uint16(127)));

  Debug.assertEq(1, uint64(uint32(1)));
  Debug.assertEq(127, uint64(uint32(127)));

  Debug.assertEq(0x100, uint16(int16(0x100)));
  Debug.assertEq(0x100, uint32(int16(0x100)));
  Debug.assertEq(0x100, uint64(int16(0x100)));
}
