import tart.reflect.Module;
import tart.testing.TestUtils;

@EntryPoint
def main(args:String[]) -> int {
  return TestUtils.runModuleTests(Module.thisModule());
}

def testValueTypeUnion() {
  var x:int or float;
  
  // Integer type
  x = 1;

  // isa tests
  Debug.assertTrue(x isa int);
  Debug.assertFalse(x isa float);
  Debug.assertFalse(x isa String);
  
  // Type casts
  Debug.assertEq(1, typecast[int](x));
  try {
    Debug.assertEq(1.0, typecast[float](x));
    Debug.fail("union member test failed");
  } catch t:TypecastException {}

  // classify  
  classify x as xi:int {
    Debug.assertTrue(xi == 1);
  } else {
    Debug.fail("union member test failed");
  }

  // Float type
  x = 1.0;
  
  // isa tests
  Debug.assertTrue(x isa float);
  Debug.assertFalse(x isa int);
  Debug.assertFalse(x isa String);
  
  // Typecasts
  Debug.assertEq(1.0, typecast[float](x));
  Debug.assertTrue(typecast[float](x) == 1.0);
  try {
    Debug.assertEq(1, typecast[int](x));
    Debug.fail("union member test failed");
  } catch t:TypecastException {}
  
  // classify
  classify x as xf:float {
    Debug.assertTrue(xf == 1.0);
  } else {
    Debug.fail("union member test failed");
  }
}

def testRefOrNoneTypeUnion() {
  var x:Throwable or String or void;
  
  // String type
  x = "Hello";
  
  // isa tests
  Debug.assertFalse(x isa float);
  Debug.assertFalse(x isa int);
  Debug.assertFalse(x isa Throwable);
  Debug.assertFalse(x isa void);
  Debug.assertTrue(x isa String);

  // type casts
  Debug.assertEq("Hello", typecast[String](x));
  try {
    //Debug.assertEq(1.0, typecast[Throwable](x));
  } catch t:TypecastException {}

  // classify  
  classify x as xs:String {
    Debug.assertTrue(xs == "Hello");
  } else {
    Debug.fail("union member test failed");
  }
  
  x = void();
  // isa tests
  Debug.assertFalse(x isa float);
  Debug.assertFalse(x isa int);
  Debug.assertFalse(x isa Throwable);
  Debug.assertTrue(x isa void);
  Debug.assertFalse(x isa String);
}

def testRefOrValueTypeUnion() {
  var x:String or int;

  // Integer type
  x = 1;

  // isa tests
  Debug.assertTrue(x isa int);
  Debug.assertFalse(x isa float);
  Debug.assertFalse(x isa String);
  
  // Type casts
  Debug.assertEq(1, typecast[int](x));
  try {
    Debug.assertEq(1.0, typecast[float](x));
    Debug.fail("union member test failed");
  } catch t:TypecastException {}

  // classify  
  classify x as xi:int {
    Debug.assertEq(1, xi);
  } else {
    Debug.fail("union member test failed");
  }

  // String type
  x = "Hello";
  
  // isa tests
  Debug.assertFalse(x isa float);
  Debug.assertFalse(x isa int);
  Debug.assertTrue(x isa String);
  
  // Typecasts
  Debug.assertEq("Hello", typecast[String](x));
  try {
    Debug.assertEq(1, typecast[int](x));
    Debug.fail("union member test failed");
  } catch t:TypecastException {}
  
  // classify
  classify x as xs:String {
    Debug.assertTrue(xs == "Hello");
  } else {
    Debug.fail("union member test failed");
  }
}

def testRefTypeUnion() {
  var x:String or TestClass;

  // String type
  x = "Hello";
  
  // isa tests
  Debug.assertFalse(x isa float);
  Debug.assertFalse(x isa int);
  Debug.assertFalse(x isa TestClass);
  Debug.assertTrue(x isa String);
  
  // Typecasts
  Debug.assertEq("Hello", typecast[String](x));
  try {
    Debug.assertTrue(TestClass() is typecast[TestClass](x));
    Debug.fail("union member test failed");
  } catch t:TypecastException {}
  
  // classify
  classify x as xs:String {
    Debug.assertTrue(xs == "Hello");
  } else {
    Debug.fail("union member test failed");
  }
}

def testOrderIndependent() {
  var x:String or int = 1;
  var y:int or String = x;
  Debug.assertTrue(y isa int);
}

class TestClass {}
