class UTF8 /*: Codec*/ {
  private static var lengthTable:int[] = [
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  ];

  /** Return the number of bytes needed to encode the character 'c'. Returns 0
      if 'c' is not an encodable character. */
  static def encodedLength(c:char) -> int {
    /*if c < 0x80 {
      return 1;
    } else if c < 0xc0 {
      return 0;
    } else if c < 0xe0 {
      return 2;
    } else if c < 0xf0 {
      return 3;
    } else if c < 0xf5 {
      return 4;
    } else {
      return 0;
    }*/
    /*
    
    switch c {
      case 0x00 .. 0x7f { return 1; }
      case 0xc2 .. 0xdf { return 2; }
      case 0xe0 .. 0xef { return 3; }
      case 0xf0 .. 0xf4 { return 4; } 
    }
    
    */
    
    return 0;
  }

  /** Return the length in bytes of the encoding character starting with
      the byte 'byteVal'. Returns 0 if 'byteVal' is not a valid UFT-8
      prefix byte. */ 
  //static def charLength(byteVal:ubyte) -> int {
  //  return lengthTable[byteVal];
  //}

  /** Return the number of characters in the byte sequence. */
  def decodedLength(buffer:ubyte[], start:int, length:int) -> int {
    var charCount:int = 0;
    var index:int = 0;
    while index < length {
      let byteCount = lengthTable[buffer[index]];
      break if byteCount == 0;
      index += byteCount;
      charCount += 1;
    }
    
    if index != length {
      throw MalformedInputException();
    }
    
    return charCount;
  }

  def encodedLength(buffer:ubyte[], start:int, length:int) -> int {
    return length;
  }
}
