/** The metatype object - the class that describes a type. */
public class TypeDescriptor {
  enum TypeKind : ubyte {
    Primitive,
    Class,
    Struct,
    Interface,
    Enum,
    Function,
    Tuple,
    Union,
    NPointer,
    NArray,
    //NonType
  }
  
  private {
    var typeInfo:NativePointer[TypeInfoBlock];
    var kind:TypeKind;
    var stype:TypeDescriptor;
    var ifaces:TypeDescriptor[];
    var params:TypeDescriptor[];
    var attrs:Attribute[];

    /** Private constructor - types cannot be created by applications. */
    private def construct() {}
  }

  /** The kind of type this is. */
  def typekind:TypeKind { get { return kind; } }

  /** The supertype of this type, or null if there is no supertype. */
  def supertype:TypeDescriptor { get { return stype; } }

  /** The list of interfaces that this type implements or extends. */
  def interfaces:TypeDescriptor[] { get { return params; } }

  /** The list of type parameters, if there are any for this type. Otherwise returns
      a zero-length array. */
  def typeParams:TypeDescriptor[] { get { return params; } }

  /** The list of attributes associated with this type. */
  def attributes:Attribute[] { get { return attrs; } }

  /** True if this is an aggregate type. */
  //final def isAggregate:bool { get { return false; } }
  
  /** True if this is an array type. */
  //final def isArray:bool { get { return false; } }
  
  /** True if this is a reference type. */
  //final def isByReference:bool { get { return kind == Class or kind == Interface; } }
}
