/** The metatype object - the class that describes a type. */
public class TypeDescriptor {
  enum TypeKind : ubyte {
    PRIMITIVE,
    CLASS,
    STRUCT,
    INTERFACE,
    ENUM,
    FUNCTION,
    TUPLE,
    UNION,
    NATIVE_POINTER,
    NATIVE_ARRAY,
    //NonType
  }

  /** The TypeInfoBlock for this type. */  
  let typeInfo:NativePointer[TypeInfoBlock];
  
  /** What general kind of type this is (CLASS, STRUCT, etc.) */
  let typeKind:TypeKind;
  
  /** Pointer to this type's supertype, or null. */
  let supertype:TypeDescriptor /* or void */;
  
  /** Array of inherited interfaces. */
  let interfaces:TypeDescriptor[];
  
  /** Array of type parameters. */
  let typeParams:TypeDescriptor[];
  
  /** Array of associated attributes */
  let attributes:Attribute[];
  
  /** Array of field members. */
  let fields:Field[];
  
  /** Array of property members. */
  let properties:Property[];
  
  /** Array of constructor members. */
  let constructors:Method[];
  
  /** Array of methods. */
  let methods:Method[];

  /** Private constructor - types cannot be created by applications. */
  private def construct() {}

  /** True if this is an aggregate type. */
  //final def isAggregate:bool { get { return false; } }
  
  /** True if this is an array type. */
  //final def isArray:bool { get { return false; } }
  
  /** True if this is a reference type. */
  //final def isByReference:bool { get { return typeKind == CLASS or kind == INTERFACE; } }

  //def construct(constructor:Method, args:Object[]) -> Object;
  //def construct(args:Object[]) -> Object;
}
