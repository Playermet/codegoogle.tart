import tart.core.Memory.zeroPtr;
import tart.core.Memory.addressOf;
import tart.text.encodings.Codecs;

/** The built-in string class. Strings are immutable. */
 /* : public Iterable[char] */
public final class String {
  private {
    /** The length of the string, in bytes. */
    var len:int;

    /** For strings which are slices, this points to the original string.
        For non-slice strings, or strings which refer to constant string
        literals, this points to 'self'. */
    var source:String;
    
    /** The pointer to the starting byte. */
    var start:NativePointer[NativeArray[ubyte, 0]];
    
    /** For non-slice strings, this is the array of bytes immediately
        following the string instance in memory. */
    var data:NativeArray[ubyte, 0];

    /** Custom allocation function for strings. */
    static def alloc(len:int) -> String {
      // The 'offsetof' trick for calculating the size.
      let s:String = __pvalloc(zeroPtr[String]().data[len]);
      s.len = len;
      s.source = s;
      s.start = addressOf(s.data);
      return s;
    }
  }

  /** Construct a string from a byte array.
      Parameters:
        bytes: The byte array.
   */
  static def create(bytes:ubyte[]) -> String {
    let self = alloc(bytes.length);
    Memory.arrayCopy(addressOf(self.data[0]), addressOf(bytes.data[0]), bytes.length);
    return self;
  }

  /** Construct a string from a subrange of a byte array.
      Parameters:
        bytes: The byte array.
        start: The starting index within the byte array.
        count: The number of bytes to use in constructing the string. Will be clamped
            to the end of the string if there are fewer than 'count' bytes following 'start'.
   */
  static def create(bytes:ubyte[], start:int, count:int) -> String {
    Preconditions.checkIndex(start >= 0);
    Preconditions.checkArgument(count >= 0);
    start = Math.min(start, bytes.length);
    count = Math.min(count, bytes.length - start);
    let self = alloc(count);
    Memory.arrayCopy(addressOf(self.data[0]), addressOf(bytes.data[0]), count);
    return self;
  }

  /** Construct a string from a char array.
      Parameters:
        chars: The character array.
        start: The starting index within the character array.
        count: The number of characters to use in constructing the string. Will be clamped
            to the end of the string if there are fewer than 'count' characters following 'start'.
   */
  static def create(chars:char[], start:int = 0, count:int = int.maxVal) -> String {
    let length = Codecs.UTF_8.encodedLength(chars, start, count);
    let bytes = ubyte[](length);
    Codecs.UTF_8.encode(bytes, 0, chars, start, count);
    let self = alloc(length);
    Memory.arrayCopy(addressOf(self.data[0]), addressOf(bytes.data[0]), length);
    return self;
  }

  /** Construct a string from a native byte array. */
  @LinkageName("String_create")
  static def create(bytes:NativePointer[NativeArray[ubyte, 0]], length:int) -> String {
    let self = alloc(length);
    Memory.arrayCopy(addressOf(self.data[0]), addressOf(bytes[0]), length);
    return self;
  }

  /** 'true' if this is an empty string. */
  def isEmpty:bool {
    get { return self.len == 0; }
  }
  
  /** The length of the string in bytes. */
  def length:int { get { return self.len; } } 

  /** Return true if this string starts with the substring 's'. */  
  def startsWith(s:String) -> bool {
    return false if s.length > self.len;
    for i = 0; i < s.length; ++i {
      return false if s[i] != self.data[i];
    }
      
    return true;
  }
  
  /** Return true if this string ends with the substring 's'. */  
  def endsWith(s:String) -> bool {
    return false if s.length > self.len;
    let offset = self.length - s.length;
    for i = 0; i < s.length; ++i {
      return false if s[i] != self.data[i + offset];
    }
      
    return true;
  }
  
  /** The length of the string in characters. */
  def charLength(start:int = 0, count:int = int.maxVal) -> int {
    var result:int = 0;
    var index:int = 0;
    while index < self.len {
      let c = self.data[index];
      if c < 0x80 {
        index += 1;
      } else if c < 0xc0 {
        // Invalid unicode char
        break;
      } else if c < 0xe0 {
        index += 2;
      } else if c < 0xf0 {
        index += 3;
      } else if c < 0xf5 {
        index += 4;
      } else {
        // Invalid unicode char, 
        break;
      }

      ++result;
    }
    
    if index != self.len {
    }
    
    return result;
  }
  
  /** Coerce a String to a String simply returns 'self'. */
  def toCharArray(start:int = 0, count:int = int.maxVal) -> char[] {
    let result = char[](self.charLength(start, count));
    var index:int = 0;
    var pos:int = 0;
    while index < self.len {
      let b = self.data[index];
      var charVal:uint = 0;
      if b < 0x80 {
        index += 1;
        charVal = b;
      } else if b < 0xc0 {
        // Invalid unicode char
        break;
      } else if b < 0xe0 {
        charVal = (uint(b & 0x3f) << 6)
                | (self.data[index + 1] & 0x7f);
        index += 2;
      } else if b < 0xf0 {
        charVal = (uint(b & 0x1f) << 12)
                | (uint(self.data[index + 1] & 0x7f) << 6)
                | (self.data[index + 2] & 0x7f);
        index += 3;
      } else if b < 0xf5 {
        charVal = (uint(b & 0x0f) << 18)
                | (uint(self.data[index + 1] & 0x7f) << 12)
                | (uint(self.data[index + 2] & 0x7f) << 6)
                | (self.data[index + 3] & 0x7f);
        index += 4;
      } else {
        // Invalid unicode char, 
        break;
      }

      result[pos++] = charVal;
    }

    return result;
  }

  /** 'true' if 's' is equal to to this string. */
  def equals(s:String) -> bool {
    return false if self.len != s.len;
    for i = 0; i < self.len; i++ {
      return false if self.start[i] != s.start[i];
    }
    
    return true;
  }

  /** The index operator. */
  def [index:int]:ubyte {
    get {
      //Preconditions.verify[IndexOutOfRangeError](index < 0 or index >= len);
      return self.data[index];
    }
  }

  /** Return this string as a memory buffer. */
  //def asBuffer -> Memory.Buffer[ubyte] {
  //  return Memory.Buffer(self, addressOf(start[0]), addressOf(start[len]));
  //}

  /** Coerce a String to a String simply returns 'self'. */
  def toString -> String {
    return self;
  }

  static def concat(s:String...) -> String {
    return concat(s);
  }

  static def concat(s:String[]) -> String {
    let count = s.length;
    var length = 0;
    for i = 0; i < count; ++i {
      length += s[i].len;
    }
    
    let result = alloc(length);
    var index = 0;
    for i = 0; i < count; ++i {
      let src = s[i];
      Memory.arrayCopy(addressOf(result.data[index]), addressOf(src.data[0]), src.len);
      index += src.len;
    }

    return result;
  }
}

/** Equality comparison operator for strings. */
public def infixEQ(s1:String, s2:String) -> bool {
  return s1.equals(s2);
}
