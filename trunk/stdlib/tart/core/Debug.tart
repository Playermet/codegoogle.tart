import tart.annex.Intrinsic;

/** Simple debug printing facility for testing the compiler. */
namespace Debug {
  @Intrinsic
  def stringify[%T](expr:T) -> String;

  @Intrinsic
  def locationOf[%T](expr:T) -> String;

  @Extern("Debug_write")
  def write(msg:String);

  def write(msgs:String...) {
    write(String.concat(msgs));
  }
  
  @Extern("Debug_writeLn")
  def writeLn(msg:String);
  
  def writeLn(msgs:String...) {
    writeLn(String.concat(msgs));
  }
  
  @Extern("Debug_fail")
  def fail(msg:String);

  def fail(msgs:String...) {
    fail(String.concat(msgs));
  }

  macro assertTrue(cond:bool) {
    if not cond {
      fail(locationOf(cond), " Assertion failed: ", stringify(cond));
    }
  }

  macro assertFalse(cond:bool) {
    if cond {
      fail(locationOf(cond), " Assertion failed, expected false: ", stringify(cond));
    }
  }

  macro assertEq[%T](expected:T, actual:T) {
    if expected != actual {
      fail(locationOf(actual), " Assertion failure, expected: ", stringify(expected),
        ", actual value: ", actual.toString());
    }
  }
}
