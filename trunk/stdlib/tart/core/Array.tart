import tart.core.Memory.zeroPtr;
import tart.core.Memory.addressOf;
import tart.core.Memory.ptrDiff;
import tart.core.Math.min;

/** Built-in array class */
public final class Array[%ElementType] : Iterable[ElementType] {
  private {
    var len:int;
    var data:NativeArray[ElementType, 0];

    /** Array allocator function */
    static def alloc(length:int) -> Array {
      let self:Array =  __pvalloc(zeroPtr[Array[ElementType]]().data[length]);
      self.len = length;
      return self;
    }

    //def asBuffer() {
    //  return MemoryBuffer.<ElementType>(self, addressOf(self.data[0]), end);
    //}

    // Static empty array singleton.
    static var emptyArray:Array = [];
  }

  /** Construct an array of a given length */
  static def create(length:int) -> Array {
    Preconditions.checkArgument(length >= 0);
    if (length == 0) {
      return emptyArray;
    }

    let self:Array = alloc(length);
    // TODO: Need to initialize the array elements to default values.
    // Memory.initToDefaultValues(addressOf(data[0]), end);
    return self;
  }

  /** Static factory function which takes advantage of the built-in behavior of
      variadic parameters to build an Array. */
  static def of(elements:ElementType...) -> Array {
    return elements;
  }

  /** True if the array is zero length. */
  def isEmpty:bool {
    get { return self.len == 0; }
  }

  /** The length of the array. */
  def length:int {
    get { return len; }
  }

  /** Array element access. */
  def [index:int]:ElementType {
    get {
      Preconditions.checkIndex(index >= 0 and index < len);
      return self.data[index];
    }
    set {
      Preconditions.checkArgument(index >= 0 and index < len);
      self.data[index] = value;
    }
  }

  /** Make a copy of this array. */  
  def copy() -> Array {
    let result = Array(self.len);
    Memory.arrayCopy(addressOf(result.data[0]), addressOf(self.data[0]), self.len);
    return result;
  }

  /** Iterate over the elements of the array. */
  def iterate -> Iterator[ElementType] {
    return ArrayIterator(self);
  }

  /** Copy 'count' elements, starting from offset 'srcOffset' in array 'src', to offset
      'dstOffset' in array 'dst'.
   */  
  static def copyElements(dst:Array, dstOffset:int, src:Array, srcOffset:int, count:int) {
    Preconditions.checkIndex(count >= 0);
    Preconditions.checkIndex(dstOffset >= 0 and dstOffset <= dst.len);
    Preconditions.checkIndex(srcOffset >= 0 and srcOffset <= src.len);
    count = min(count, dst.len - dstOffset, src.len - srcOffset);
    if count > 0 {
      Memory.arrayMove(addressOf(dst.data[dstOffset]), addressOf(src.data[srcOffset]), count);
    }
  }

  public final class ArrayIterator : Iterator[ElementType], HasLength {
    private var array:Array;
    private var index:int;
    
    def construct(array:Array) {
      self.array = array;
      self.index = 0;
    }
    
    def next() -> ElementType or void {
      if (self.index < self.array.len) {
        return self.array.data[self.index++];
      } else {
        return;
      }
    }

    def length:long { get { return array.len; } }
  }
}
