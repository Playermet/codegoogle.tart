import tart.reflect.Type;

/** All objects contain a pointer to a TypeInfoBlock, which contains the
    pointer to the type object and the method table.
 */
struct TypeInfoBlock {
  /** Reference to the type object for this type. */
  readonly var type:Type;

  /** List of all types (classes and interfaces) that this type can be cast to.
      A null pointer terminates the list. */
  readonly var bases:NativePointer<[NativeArray<[Type, 0]>]>;

  /** Compiler-generated table of class methods. */
  readonly var methodTable:NativeArray<[NativePointer<[void]>, 0]>;

  /** Method to test whether a reference to an object of the type represented
      by this TIB can be legally cast to a reference to type 'toType'. Used
      by the compiler to do 'isa', 'as' and 'catch' tests. */
  public final def hasBase(toType:Type) -> bool {
    return true if self.type is toType;
    var i = 0;
    while let base:Type = self.bases[i++] {
      return true if base is toType;
    }

    return false;
  }
}
