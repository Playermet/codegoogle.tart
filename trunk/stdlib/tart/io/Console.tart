import tart.core.Memory.Address;

/** Contains the standard input & output streams. */
public namespace Console {
  private {
    enum StreamID {
      STDIN,
      STDOUT,
      STDERR,
    }
    
    @Extern("get_std_stream") def getStdStream(id:StreamID) -> Address[StdFileStream.FILE];

    var _cin:TextReader or Null = null;
    var _cout:TextWriter or Null = null;
    var _cerr:TextWriter or Null = null;
    
    macro lazyEval[%T](lval:T or Null, init:T) -> T {
      if lval is null {
        lval = init;
      }
      
      return typecast[T](lval);
    }
  }

  /** Return the input stream for stdin. */
  def cin:TextReader {
    get {
      classify _cin {
        as r:TextReader { return r; }
        else {
          let r:TextReader = StdFileStream(getStdStream(StreamID.STDIN), true, false, false);
          _cin = r;
          return r;
        }
      }
    }
  }

  /** Standard output stream. */
  def cout:TextWriter {
    get {
      return lazyEval(_cout, StdFileStream(getStdStream(StreamID.STDOUT), false, true, false));
    }
  }

  /** Standard error output stream. */
  def cerr:TextWriter {
    get {
      return lazyEval(_cerr, StdFileStream(getStdStream(StreamID.STDERR), false, true, false));
    }
  }
}
