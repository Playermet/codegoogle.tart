import tart.text.encodings.Codec;
import tart.text.encodings.Codecs;

/** TextWriter implementation which can write to a C FILE handle. */
class FileStream : TextWriter {
  private {
    var codec:Codec;
    var source:ByteStream;
  }

  def construct(source:ByteStream) {
    self.codec = Codecs.UTF_8;
    self.source = source;
  }
  
  def construct(source:ByteStream, codec:Codec) {
    self.codec = codec;
    self.source = source;
  }
  
  // Need encoding

  /** Close the reader and release any resources held by the reader instance. */
  def close() {
    source.close();
  }

  /** Flush any pending writes. */
  def flush() {
  }

  def writeChars(chars:char[], start:int = 0, count:int = int.maxVal) -> int {
    return 0;
  }

  def writeString(text:String, start:int = 0, count:int = int.maxVal) -> int {
    return 0;
  }

  /** Write a string of text to the output stream. */
  final def write(text:String) -> TextWriter {
    writeString(text);
    return self;
  }

  /** Concatenate strings and write them to the output stream. */
  final def write(text:String...) -> TextWriter {
    writeString(String.concat(text));
    return self;
  }

  /** Write a string of text to the output stream followed by a line break. */
  final def writeLn(text:String) -> TextWriter {
    writeString(text);
    writeString("\n");
    return self;
  }

  /** Concatenate strings and write them to the output stream, followed by a line break. */
  final def writeLn(text:String...) -> TextWriter {
    writeString(String.concat(text));
    writeString("\n");
    return self;
  }

  /** Write values to the output stream using a format string. */
  final def writeFmt(format:String, values:Object...) -> TextWriter {
    return self;
  }

  /** Write values to the output stream using a format string, followed by a line break. */
  final def writeLnFmt(format:String, values:Object...) -> TextWriter {
    writeString("\n");
    return self;
  }
}
