/** Interface to a stream of bytes, which may be readable and/or writeable. */
interface ByteStream {
  enum SeekFrom {
    CURRENT,
    START,
    END
  }
  
  /** Read a single byte from the stream. */
  //@Throws(IOException)
  def read -> byte;
  
  /** Read a buffer of bytes from the stream. */
  //@Throws(IOException)
  def read(buffer:byte[], offset:int = 0, count:int = int.maxVal) -> int;
  
  /** Write a single byte to the stream. */
  //@Throws(IOException)
  def write(value:byte) -> void;

  /** Write a buffer of bytes to the stream. */
  //@Throws(IOException)
  def write(buffer:byte[], offset:int = 0, count:int = int.maxVal) -> void;
  
  /** Change the current read/write position of the stream. */
  //@Throws(IOException)
  def seek(from:SeekFrom, offset:int64) -> int64;
  
  /** True if we've reached the end of available input. */
  //@Throws(IOException)
  def atEnd: bool { get; }
  
  /** True if the stream supports reading. */
  def canRead:bool { get; }
  
  /** True if the stream supports writing. */
  def canWrite:bool { get; }
  
  /** True if this stream supports seek operations. */
  def canSeek:bool { get; }
  
  /** Returns the current position in the stream. */
  //@Throws(IOException)
  def position:int64 { get; }
  
  /** Return the length of the stream, or -1 if indeterminate. */
  //@Throws(IOException)
  def length:int64 { get; }
  
  /** Flush any pending writes. */
  //@Throws(IOException)
  def flush -> void;
  
  /** Close the stream. */
  //@Throws(IOException)
  def close -> void;
}
