/** Map interface */
interface Map[%Key, %Value] : Iterable[(Key, Value)] {

  /** Access a value by key. */
  def [key:Key]:Value { get; set; }
  
  /** The number of items in the map. */
  def length:int { get; }

  /** Return true if there are no entries in this map. */
  def isEmpty:bool { get; }

  /** Remove all entries from the map. */
  def clear();

  /** Return true if the map contains the specified key. */  
  def contains(key:Key) -> bool;

  /** Return an iterator over all keys in the map. */  
  def keys:Iterator[Key] { get; }

  /** Return an iterator over all values in the map. */
  def values:Iterator[Key] { get; }
  
  /** Add the specified key/value pair to the map. */
  def add(entry:(Key, Value)) -> bool;

  /** Add to the map all of the key value pairs in 'entries'. */
  def addAll(entries:(Key, Value)...);
  def addAll(entries:Collection[(Key, Value)]);
  def addAll(entries:Iterator[(Key, Value)]);

  /** Remove an entry from the collection by key. Returns 'true' if the item was in the
      collection and was removed, 'false' if the item wasn't in the collection to begin with. */
  def remove(key:Key) -> bool;
  
  /** Remove all of the entries having a key contained in 'keys'. */
  def removeAll(keys:Key...);
  def removeAll(keys:Iterator[Key]);
}
