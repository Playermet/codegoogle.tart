import tart.core.Math.max;

/** Array-backed list type. */
final class ArrayList[%ElementType] : List[ElementType] {
  private {
    var data:ElementType[];
    var _length:int;

    def grow(amount:int) {
      let nlength = self._length + amount;
      if data.length < nlength {
        let ndata = ElementType[](nlength + nlength / 2 + 16);
        ElementType[].copyElements(ndata, 0, data, 0, self._length);
        self.data = ndata;
      }

      self._length = nlength;
    }
  }

  /** Construct a new ArrayList from a variable number of input arguments.
      Parameters:
          data: The list of values to store in the ArrayList.
          initialCapacity: This optional parameter, if present, indicates
              how much initial space to reserve.
   */
  def construct(data:ElementType...; initialCapacity:int = 0) {
    initialCapacity = max(initialCapacity, data.length);
    self.data = ElementType[](initialCapacity);
    ElementType[].copyElements(self.data, 0, data, 0, data.length);
    _length = data.length;
  }

  /** Construct a new ArrayList from an array.
      Parameters:
          data: The array of values to store in the ArrayList.
          initialCapacity: This optional parameter, if present, indicates
              how much initial space to reserve.
   */
  def construct(data:Array[ElementType], initialCapacity:int = 0) {
    initialCapacity = max(initialCapacity, data.length);
    self.data = ElementType[](initialCapacity);
    ElementType[].copyElements(self.data, 0, data, 0, data.length);
    _length = data.length;
  }

  def add(e:ElementType) {
    let index = _length;
    grow(1);
    data[index] = e;
  }

  def insert(position:int, e:ElementType) {
  }

  def remove(index:int) {
    Preconditions.checkIndex(index >= 0);
    Preconditions.checkIndex(index < _length);
    ElementType[].copyElements(data, index, data, index + 1, _length - index - 1);
    --_length;
  }

  def [index:int]:ElementType {
    get {
      Preconditions.checkIndex(index >= 0);
      Preconditions.checkIndex(index < _length);
      return data[index];
    }

    set {
      Preconditions.checkIndex(index >= 0);
      Preconditions.checkIndex(index < _length);
      data[index] = value;
    }
  }
  
  def length:int {
    get { return _length; }
  }

  /** The amount of space currently reserved. */
  def capacity:int {
    get { return data.length; }
  }

  def iterate -> Iterator[ElementType] {
    return ArrayListIterator(self);
  }

  /** Iterator class for ArrayList. */
  private final class ArrayListIterator : Iterator[ElementType], HasLength {
    private var list:ArrayList;
    private var index:int;
    
    def construct(list:ArrayList) {
      self.list = list;
      self.index = 0;
    }
    
    def next -> ElementType or void {
      if (self.index < self.list.length) {
        return self.list.data[self.index++];
      } else {
        return;
      }
    }

    def length:int64 { get { return list.length; } }
  }
}
