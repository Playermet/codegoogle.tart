/** A quadratically-probed hash set. */
final class HashSet[%ItemType, %HashFn = Hashing.HashFn[ItemType]] : Set[ItemType] {
  
  private {
    enum EntryState : uint8 {
      EMPTY,
      DELETED,
      OCCUPIED
    }
    
    struct Entry {
      var value:ItemType;
      var state:EntryState;
      
      def construct(value:ItemType) {
        self.value = value;
        self.state = EntryState.OCCUPIED;
      }
    }
    
    var _data:Entry[];
    var _length:intp;
    var _modified:bool = false;
    let _hashFn:HashFn;
    
    def findEntry(item:ItemType) -> intp {
	    if _data.length > 16 {
        let mask = _data.length - 1;
        var index = intp(_hashFn.hash(item)) & mask;
        var probe = 1;
      
	      // First, see if the item is already in the table
	      while probe <= 4 {
	        let st = self._data[index].state;
	        return -1 if st == EntryState.EMPTY;
          return index if st == EntryState.OCCUPIED and self._data[index].value == item;
	        index = (index + probe) & mask;
	        probe += 1;
	      }
	      
	      return -1;
	    } else if _data.length > 0 {
	      for i = 0; i < _length; ++i {
	        if _data[i].value == item {
	          return i;
	        }
	      }
	
	      return -1;
	    } else {
	      return -1;
	    }
    }

    def rehash(oldItems:Entry[], oldLength:intp, newLength:intp) {
      let mask = newLength - 1;
      self._data = Entry[](newLength);
      for i = 0; i < oldLength; ++i {
        if oldItems[i].state == EntryState.OCCUPIED {
          let item = oldItems[i].value;
          var index = int(_hashFn.hash(item)) & mask;
          var probe = 1;
          // Rehashing presumes that all keys are already unique.
          while self._data[index].state == EntryState.OCCUPIED {
            index = (index + probe) & mask;
            probe += 1;
            if probe > 4 {
              // If it takes more than 4 probes, then expand the table again and
              // start the rehashing over.
              rehash(oldItems, oldLength, newLength * 2);
              return;
            }
          }
          
          _data[index] = Entry(item);
        }
      }
    }
    
    def grow() {
      
    }
  }
  
  def construct() {
    self._data = Entry[](0);
    self._length = 0;
  }

/*  def construct(items:ItemType...; capacity:int32 = 0) {
    self._data = Entry[](capacity);
    self._length = 0;
    self.addAll(items);
  }*/

  def add(item:ItemType) -> bool {
    if _data.length > 16 {
      // Compute the hash of the item
      let mask = _data.length - 1;
		  var index = intp(_hashFn.hash(item)) & mask;
		  var probe:intp = 1;
      var pos:intp = -1;
		  
		  // First, see if the item is already in the table
      while probe <= 4 {
        switch self._data[index].state {
          case EMPTY {
            if pos < 0 { pos = index; }
            break;
          }
          
          case DELETED {
            if pos < 0 { pos = index; }
          }
          
          case OCCUPIED {
            return false if self._data[index].value == item;
          }
        }

        index = (index + probe) & mask;
        probe += 1;
      }
      
      if pos < 0 {
        rehash(_data, _data.length, _data.length * 2);
        return add(item);
      }
      
      _data[pos] = Entry(item);
      _length++;
      return true;
    } else if _data.length > 0 {
      for i = 0; i < _length; ++i {
        if _data[i].value == item {
          return false;
        }
      }

      // Time to re-hash the table.
      if _length == 16 {
        rehash(_data, _length, _length * 4);
        return add(item);
      }

      _data[_length] = Entry(item);
      _length++;
    } else {
      _data = Entry[](16);
      _data[0] = Entry(item);
      _length = 1;
    }

    return true;
  }

  def addAll(items:ItemType...) {
    addAll(items.iterate());
  }
  
  def addAll(items:Collection[ItemType]) {
    for item in items {
      add(item);
    }
  }

  def addAll(items:Iterator[ItemType]) {
    for item in items {
      add(item);
    }
  }

  def remove(item:ItemType) -> bool {
    if _data.length > 16 {
      let hashVal = _hashFn.hash(item);
    } else if _data.length > 0 {
      for i = 0; i < _length; ++i {
        if _data[i].value == item {
          Memory.arrayMove(_data.elementAddress(i), _data.elementAddress(i+1), _length - i - 1);
          --_length;
          return true;
        }
      }

      return false;
    } else {
      return false;
    }
    
    return false;
  }
  
  def removeAll(items:ItemType...) {
    removeAll(items.iterate());
  }
  
  def removeAll(items:Collection[ItemType]) {
    for item in items {
      remove(item);
    }
  }

  def removeAll(items:Iterator[ItemType]) {
    for item in items {
      remove(item);
    }
  }

  def contains(item:ItemType) -> bool {
    return findEntry(item) >= 0;
  }

  def clear() {
    _data = Entry[](0);
    _length = 0;
    _modified = true;
  }
  
  def length:intp { get { return _length; } }

  def isEmpty:bool { get { return _length == 0; } }
  
  def iterate -> Iterator[ItemType] {
    return HashSetIterator(self);
  }
  
  def containsAll(items:Collection[ItemType]) -> bool {
    for item in items {
      return false if not contains(item);
    }
    
    return true;
  }
  
  def containsAll(items:Iterator[ItemType]) -> bool {
    for item in items {
      return false if not contains(item);
    }
    
    return true;
  }
  
  def containsAny(items:Collection[ItemType]) -> bool {
    for item in items {
      return true if contains(item);
    }
    
    return false;
  }
  
  def containsAny(items:Iterator[ItemType]) -> bool {
    for item in items {
      return true if contains(item);
    }
    
    return false;
  }
  
  class HashSetIterator : Iterator[ItemType] {
    private {
      var data:Entry[];
      var index:int32;
    }

    def construct(hashSet:HashSet) {
      self.data = hashSet._data;
    }

    def next -> ItemType or void {
      while index < data.length {
        let entry = data[index++];
        return entry.value if entry.state == EntryState.OCCUPIED;
      }
      
      return;
    }
  }
}
