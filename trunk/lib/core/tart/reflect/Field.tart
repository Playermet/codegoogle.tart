import tart.collections.List;
import tart.core.Memory.Address;
import tart.core.Memory.addressOf;
import tart.core.Memory.objectAddress;
import tart.core.Memory.reinterpretPtr;

/** Description of a class field. */
class Field : DataMember {
  private {
    var _offset:int; // For instance vars.
    var _addr:Address[void]; // For global vars
  }

  def construct(
      name:String,
      kind:MemberKind,
      visibility:Visibility,
      traits:Traits,
      attributes:List[Object],
      type:Type,
      selfType:optional Type,
      offset:int) {
    super(name, kind, visibility, traits, attributes, type, selfType);
    _offset = offset;
  }

  def construct(
      name:String,
      kind:MemberKind,
      visibility:Visibility,
      traits:Traits,
      attributes:List[Object],
      type:Type,
      selfType:optional Type,
      addr:Address[void]) {
    super(name, kind, visibility, traits, attributes, type, selfType);
    _addr = addr;
  }

  final def isReadable:bool { get { return true; } }
  final def isWriteable:bool { get { return true; } }

	// Implement
  final def getValue(obj:Object) -> Object {
    if selfType is not null {
	    return type.getFieldValue(fieldAddress(selfType.checkCast(obj)));
    } else {
	    return type.getFieldValue(_addr);
    }
  }

  final def setValue(obj:Object, value:Object) {
    if selfType is not null {
      type.setFieldValue(fieldAddress(selfType.checkCast(obj)), value);
    } else {
      type.setFieldValue(_addr, value);
    }
  }
  
  private def fieldAddress(obj:Object) -> Address[void] {
    let addr:Address[ubyte] = reinterpretPtr(objectAddress(obj));
    return reinterpretPtr(addressOf(addr[_offset]));
  }
}
