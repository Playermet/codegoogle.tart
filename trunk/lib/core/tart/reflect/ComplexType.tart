import tart.annex.Intrinsic;
import tart.core.Memory.Address;

/** Reflection type for classes, structs, and interfaces. */
public class ComplexType : SimpleType {
  private {
    var _typeInfo:Address[TypeInfoBlock];
    var _superType:optional ComplexType;
    var _interfaces:ComplexType[];
    var _typeParams:Type[];
    var _attributes:Attribute[];
    var _fields:Field[];
    var _properties:Property[];
    var _constructors:Method[];
    var _methods:Method[];
    var _innerTypes:Type[];
    var _alloc:static fn -> Object;
    var _noArgCtor:static fn :Object -> Object;
  }

  undef construct();

  /** Given a type literal, return the reflected complex type object. */
  @Intrinsic static def of[%T](typeName:TypeLiteral[T]) -> ComplexType;

  /** Pointer to this type's supertype, or null. */
  final def supertype:optional ComplexType { get { return self._superType; } }
  
  /** Array of inherited interfaces. */
  final def interfaces:ComplexType[] { get { return self._interfaces; } }
  
  /** Array of type parameters. */
  final def typeParams:Type[] { get { return self._typeParams; } }
  
  /** Array of associated attributes */
  final def attributes:Attribute[] { get { return self._attributes; } }
  
  /** Array of field members. */
  final def fields:Field[] { get { return self._fields; } }

  /** Array of property members. */
  final def properties:Property[] { get { return self._properties; } }
  
  /** Array of constructor members. */
  final def constructors:Method[] { get { return self._constructors; } }
  
  /** Array of methods. */
  final def methods:Method[] { get { return self._methods; } }

  /** Array of types defined within this type. */
  final def innerTypes:Type[] { get { return self._innerTypes; } }

  /** Return true if this type has a custom allocator. */
  final def hasCustomAlloc:bool { get { return self._alloc is null; } }

  /** Return the first method whose name is 'name'. */
  def findMethod(name:String) -> Method or void {
    for m in _methods {
      if m.name == name {
        return m;
      }
    }

    return;
  }

  /** Allocate and initialize a new object of this type, using the specified constructor. */  
  final def create(ctor:Method, args:Object...) -> Object {
    switch (typeKind) {
      case CLASS {
        return ctor.call(self._alloc(), args);
      }
        
      case STRUCT {
        throw InvocationError("Unimplemented struct construction");
      }
      
      else {
        throw InstantiationError(self);
      }
    }
  }

  /** Allocate and initialize a new object of this type, using a default constructor. */  
  final def create() -> Object {
    switch (typeKind) {
      case CLASS {
	      if _noArgCtor is not null {
	        return _noArgCtor(self._alloc());
	      }
    
        throw InvocationError("Class does not have a no-arg constructor");
      }
        
      case STRUCT {
        throw InvocationError("Unimplemented struct construction");
      }
      
      else {
        throw InstantiationError(self);
      }
    }
  }
  
  private final def isSubclassImpl(cls:Type) -> bool {
    return true if self is cls;
    return false if _superType is null;
    return _superType.isSubclassImpl(cls);
  }

  final def isSubclass(cls:Type) -> bool {
    return isSubclassImpl(cls);
  }

  final def isSubclass[%T](cls:TypeLiteral[T]) -> bool {
    return isSubclassImpl(Type.of(T));
  }
}
