import tart.core.Memory.Address;

/** Description of a callable method. */
final class Method : Member {
  private {
	  var _typeParams:Type[];
    var _type:FunctionType;
	  var _params:Parameter[];
    var _methodPointer:Address[void];
  }

  undef construct();

  /** Array of type parameters. */
  final def typeParams:Type[] { get { return _typeParams; } }

  /** The type of the method. */
  final def type:FunctionType { get { return _type; } }

  /** The return type of the method. */
  final def returnType:Type { get { return _type.returnType; } }

	/** Number of parameters for this method. */
  final def numParams:int { get { return type.numParams; } }
  
  /** The array of function parameter types. */
  final def paramTypes:Type[] { get { return _type.paramTypes; } }

  /** The parameters of this method. */
  final def params:Parameter[] { get { return _params; } }
  
  /** Call this method with the given arguments.
      Parameters:
        obj - The 'self' argument, or Null if this is a static method.
        args - The list of arguments to the method.
   */
  final def call(obj:Object, args:Object[]) -> Object {
    // TODO: Need a static function for attempt to call an abstract method.
    return _type.invoke(_methodPointer, obj, args);
  }

  /** Call this method with the given arguments.
      Parameters:
        obj - The 'self' argument, or Null if this is a static method.
        args - The list of arguments to the method.
   */
  final def call(obj:Object, args:Object...) -> Object {
    return _type.invoke(_methodPointer, obj, args);
  }
}
