import tart.reflect.Reflection;
import tart.annex.Intrinsic;
import tart.core.Memory.Address;

/** The metatype object - the class that describes a type. */
@Reflection(Reflection.Detail.NONE) abstract class Type {
  enum TypeKind : ubyte {
    OPAQUE,
    PRIMITIVE,
    CLASS,
    STRUCT,
    INTERFACE,
    PROTOCOL,
    ENUM,
    FUNCTION,
    TUPLE,
    UNION,
    ADDRESS,
    NATIVE_ARRAY,
    UNIT,
  }

  private {
    var _typeKind:TypeKind;
  }

  protected def construct(typeKind:TypeKind) {
    self._typeKind = typeKind;
  }

  /** What general kind of type this is (CLASS, STRUCT, etc.) */
  final def typeKind:TypeKind { get { return _typeKind; } }

	/** If 'obj' is castable to this type, do the cast and return the raw address,
			otherwise throw a typecast exception. */
  @Unsafe def downCast(obj:Object) -> Address[void] {
    throw TypecastError(obj, self);
  }
  
  /** True if this is the void type. */
  def isVoidType:bool { get { return false; } }

  /** True if this is the null type. */
  def isNullType:bool { get { return false; } }

  /** True if this is a boolean type. */
  def isBooleanType:bool { get { return false; } }

  /** True if this is a boolean type. */
  def isCharType:bool { get { return false; } }

  /** True if this is an integer type. */
  def isIntegerType:bool { get { return false; } }

  /** True if this is a signed integer type. */
  def isSignedIntegerType:bool { get { return false; } }

  /** True if this is an unsigned integer type. */
  def isUnsignedIntegerType:bool { get { return false; } }

  /** True if this is a floating-point type. */
  def isFloatType:bool { get { return false; } }

  /** Return a string representation of this type. */
  abstract override toString() -> String;
  
  /** Given a type literal, return the reflected type object. */
  @Intrinsic static def of[%T](typeName:TypeLiteral[T]) -> Type;
}
