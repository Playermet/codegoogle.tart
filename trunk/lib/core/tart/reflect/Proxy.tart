import tart.annex.Intrinsic;

/** A class which can be used to synthesize an implementation of an interface. */
namespace Proxy {
  /** Object which intercepts method calls and property accesses to the interface proxy. */
  interface CallHandler[%T] {
	  //require T <= Object;
	  //require T isa Interface[T];
	  /// Get the value of the specified property.
	  def getPropertyValue(obj:T, property:Property) -> Object;
	
	  /// Set the value of the specified property.
	  def setPropertyValue(obj:T, property:Property, value:Object);
	  
	  /// Call the given method with the given arguments.
	  def callMethod(obj:T, method:Method, args:Object[]) -> Object;
  }
  
  @Intrinsic def create[%T](typeName:TypeLiteral[T], handler:CallHandler[T]) -> T;
}
