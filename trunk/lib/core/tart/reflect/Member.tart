
/** A member of a type */
@Reflection(Reflection.Detail.NONE) class Member {
  enum Visibility : ubyte {
    PUBLIC,
    PROTECTED,
    PRIVATE,
  }
  
  enum MemberKind : ubyte {
    FIELD,
    PROPERTY,
    METHOD,
    CONSTRUCTOR,
  }
  
  @Flags enum Traits : ubyte {
    FINAL,
    ABSTRACT,
    STATIC,
    UNSAFE,
  }

  private {
    //var _meta:ReflectionMetadata;
    var _name:String;
    var _scopeName:String;
    var _kind:MemberKind;
    var _visibility:Visibility;
    var _traits:Traits;
    var _attributes:Object[];
  }

  private def construct() {}
  protected def construct(
      name:String,
      //qualifiedName:String,
      kind:MemberKind,
      visibility:Visibility,
      traits:Traits,
      attributes:Object[]) {
    self._name = name;
    //self.qualifiedName_ = qualifiedName;
    self._kind = kind;
    self._visibility = visibility;
    self._traits = traits;
    self._attributes = attributes;
  }

  /** The unqualified member name. */
  final def name:String { get { return _name; } }
  
  /** The name of the scope in which this is defined. */
  final def scopeName:String { get { return _scopeName; } }
  
  /** The qualified member name. */
  //final def fullName:String { get { return _fullName; } }
  
  /** What kind of member this is (FIELD, PROPERTY, METHOD, CONSTRUCTOR) */
  final def kind:MemberKind { get { return _kind; } }
  
  /** Accessibility of this member. */
  final def visibility:Visibility { get { return _visibility; } }
  
  /** Various member flags. */
  final def traits:Traits { get { return _traits; } }

  /** Array of attributes for this member. */
  final def attributes:Object[] { get { return _attributes; } }

  /** Return the first attribute of type 'attrType'. */
  final def findAttribute[%T](attrType:TypeLiteral[T]) -> optional T {
    for attr in _attributes {
      classify attr as result:T {
        return result;
      }
    }
    return null;
  }

	/** Return true if this member has an attribute of type 'attrType'. */ 
  final def hasAttribute[%T](attrType:TypeLiteral[T]) -> bool {
	  //return any(_attributes, fn attr { attr isa T; });
    for attr in _attributes {
      return true if attr isa T;
    }
    return false;
  }

  /** The class that declared this member, or null if it's a global function. */
  //let definingScope:Type;

  /** True if this member has static or global storage class. */  
  //def isStatic:bool { get { return (Traits.STATIC in _traits) != 0; } }

  /** True if this member was declared 'final'. */  
  //def isFinal:bool { get { return (Traits.FINAL in _traits) != 0; } }

  /** True if this member is abstract. */  
  //def isAbstract:bool { get { return (Traits.ABSTRACT in _traits) != 0; } }
}
