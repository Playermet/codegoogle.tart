import tart.core.Memory.Address;

/** Reflection type class for functions. This object is shared by all functions that
    have the same type signature.
  */
class FunctionType : Type {
  private {
    var _returnType:Type;
    var _selfType:Type;
    var _paramTypes:Type[];
    var _invoke:static fn (func:Address[void], obj:Address[void], args:Object[]) -> Object;
    var _dcObject:static fn (obj:Object) -> Address[void]; // Down-cast object

	  /** Helper function to check the number of arguments. */
	  static def checkArgCount(args:Object[], count:int32) {
	    if args.length != count {
	      throw InvocationException("Incorrect number of arguments");
	    }
	  }
	
	  /** Helper function to ensure that the object pointer is null. */
	  static def ignoreObjectPtr(obj:Object) -> Address[void] {
	    return null;
	  }
  }

  undef construct();

  /** The return type of the method. */
  final def returnType:Type { get { return _returnType; } }

  /** The type of object that this a member of, or null if this is a static or
      global function. */
  final def selfType:Type { get { return _selfType; } }

  /** The array of parameter types. */
  final def paramTypes:Type[] { get { return _paramTypes; } }

  /** Trampoline function to invoke a method of this type. */
  final def invoke(func:Address[void], obj:Object, args:Object[]) -> Object {
    return self._invoke(func, self._dcObject(obj), args);
  }
}
