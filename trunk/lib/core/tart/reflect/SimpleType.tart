/** Reflection type class for primitive and enum types. */
class SimpleType : Type {
  enum SubtypeId : ubyte {
    NONE = 0,
    VOID,
    NULL,
    BOOL,
    CHAR,
    INT8,
    INT16,
    INT32,
    INT64,
    UINT8,
    UINT16,
    UINT32,
    UINT64,
    FLOAT,
    DOUBLE,
  }

  private {
    var _subtype:SubtypeId;
    var _name:String;
    //var _scopeName:String;
    var _size:uint32;
  }

  def construct(kind:TypeKind, subtype:SubtypeId, name:String, size:uint32) {
    super(kind);
    self._subtype = subtype;
    self._name = name;
    self._size = size;
  }

  /** Size of this type in bits. */
  final def subtype:SubtypeId { get { return self._subtype; } }

  /** Fully-qualified name of this type. */
  final def name:String { get { return self._name; } }

  /** Size of this type in bytes. */
  final def size:uint32 { get { return self._size; } }

  final override toString() -> String {
    return _name;
    /*switch _subtype {
      case VOID { return "void"; }
      case NULL { return "Null"; }
      case BOOL { return "bool"; }
      case CHAR { return "char"; }
      case INT8 { return "int8"; }
      case INT16 { return "int16"; }
      case INT32 { return "int32"; }
      case INT64 { return "int64"; }
      case UINT8 { return "uint8"; }
      case UINT16 { return "uint16"; }
      case UINT32 { return "uint32"; }
      case UINT64 { return "uint64"; }
      case FLOAT { return "float"; }
      case DOUBLE { return "double"; }
      else { return "<invalid type>"; }
    }*/
  }
}
