/** Interface used to encode and decode characters in a particular text format. */
interface Codec {

  /** Specifies what to do if erroneous input is encountered. */
  enum ErrorAction {
    SKIP,   ///< Skip over erroneous characters.
    REPLACE,///< Replace bad characters with the encoder's replacement character.
    ABORT,  ///< Throw an exception.
  }

  enum CodecState {
    OK,               ///< No errors encountered.
    MALFORMED_INPUT,  ///< The input byte stream had an invalid sequence of bytes.
    INVALID_CHAR,     ///< Attempt to encode an invalid character.
  }

  /** Used to represent the result of an encode or decode operation. */
  struct Result {
    var dstIndex:int;           ///< Next available position in the destination array.
    var srcIndex:int;           ///< Next position to read in the source array.
    var state:CodecState;       ///< The current error state.

    def construct(srcIndex:int, dstIndex:int, state:CodecState = CodecState.OK) {
      self.srcIndex = srcIndex;
      self.dstIndex = dstIndex;
      self.state = state;
    }
  }

  /** Name of this codec. */
  def name:String { get; }

  /** Return the length, in bytes, of the character array when encoded.
      Parameters:
        src: The characters to be encoded.
        srcOffset: The starting position within the character array.
        count: The number of characters to encode.
      Returns: The number of bytes required to encode the specified character range.
    */
  def encodedLength(src:char[], srcOffset:int, count:int) -> int;

  /** Return the length, in characters, of the byte array when decoded.
      Parameters:
        src: The bytes to be decoded.
        srcOffset: The starting position within the byte array.
        count: The number of bytes to decode.
      Returns: The number of encoded characters.
    */
  def decodedLength(src:ubyte[], srcOffset:int, count:int) -> int;

  /** Encode the characters in 'src'.
      Parameters:
        dst: The destination byte array.
        dstOffset: The start position in the destination array to write to.
        src: The characters to be encoded.
        srcOffset: The starting position within the character array.
        count: The number of characters to encode.
      Returns: A 'Result' object indicating the number of characters read, and the
        number bytes written to 'dst'.
    */
  def encode(dst:ubyte[], dstOffset:int, src:char[], srcOffset:int, count:int) -> Result;

  /** Decode the characters in 'src'.
      Parameters:
        dst: The destination character array.
        dstOffset: The start position in the destination array to write to.
        src: The bytes to be decoded.
        srcOffset: The starting position within the byte array.
        count: The number of bytes to decode.
      Returns: A 'Result' object, indicating the number of bytes read, and the
        number of characters written to 'dst'.
    */
  def decode(dst:char[], dstOffset:int, src:ubyte[], srcOffset:int, count:int) -> Result;
}
