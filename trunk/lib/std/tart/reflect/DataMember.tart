import tart.collections.List;

/** Common base class for fields and properties - any member that can be read (and possibly written). */
abstract class DataMember : Member {
  private {
    var _selfType:Type?;

    undef construct();
  }

  /** The type that contains this member, or null if this is static or global. */
  final def selfType:Type? { get { return _selfType; } }

	/** True if this data member is readable. */
  abstract def isReadable:bool { get; }

	/* True if this data member is writeable. */
  abstract def isWriteable:bool { get; }

	/** Get the value of this member field, for the given object. */
  abstract def getValue(obj:Object) -> Object;

	/** Set the value of this member field, for the given object. */
  abstract def setValue(obj:Object, value:Object);
}
