import tart.core.Math.max;
import tart.core.Memory.arrayCopy;

/** A list type with a fixed set of elements.
    InheritDoc: members
 */
final class ImmutableList[%ElementType] : List[ElementType] {
  private {
    var data:ElementType[];
  }

  /** Create an empty ImmutableList. */
  private def construct() {
    self.data = [];
  }

  /** Create an ImmutableList from the elements given. */
  private def construct(data:ElementType[]) {
    self.data = data;
  }

  undef add(e:ElementType) ;
  undef addAll(collection:Collection[ElementType]);
  undef insert(position:int, e:ElementType);
  undef insertAll(position:int, collection:Collection[ElementType]);
  undef remove(index:int);
  undef clear();

  def [index:int]:ElementType {
    get {
      return data[index];
    }

    set {
      throw UnsupportedOperationError();
    }
  }

  def size:int {
    get { return self.data.size; }
  }

  def isEmpty:bool {
    get { return self.data.size == 0; }
  }

  def contains(el:ElementType) -> bool {
    for i = 0; i < self.data.size; ++i {
			if self.data[i] == el {
			  return true;
			}
    }
    return false;
  }

  def iterate -> Iterator[ElementType] {
    return self.data.iterate();
  }

  static def of(elements:ElementType...) -> ImmutableList {
    return ImmutableList(elements);
  }

  static def copyOf(elements:ElementType[]) -> ImmutableList {
    return ImmutableList(elements.copy());
  }

  static def copyOf(elements:Collection[ElementType]) -> ImmutableList {
    let data = Array[ElementType](elements.size);
    var index = 0;
    for element in elements {
      data[index++] = element;
    }
    return ImmutableList(data);
  }
}
