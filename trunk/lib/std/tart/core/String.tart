import tart.collections.Copyable;
import tart.core.Memory.addressOf;
import tart.core.Memory.Address;
import tart.text.encodings.Codec;
import tart.text.encodings.Codecs;
import tart.text.encodings.InvalidCharacterError;
import tart.text.Character;

/** The built-in string class. Strings are immutable. */
public final immutable class String : Iterable[char] {
  private {
    /** The length of the string, in bytes. */
    var _size:int;

    /** For strings which are slices, this points to the original string.
        For non-slice strings, or strings which refer to constant string
        literals, this points to 'self'. */
    var _source:String;

    /** The pointer to the starting byte. */
    var _start:Address[ubyte];

    /** For non-slice strings, this is the array of bytes immediately
        following the string instance in memory. */
    var _data:FlexibleArray[ubyte];

    /** Custom allocation function for strings. */
    static def alloc(len:int) -> String {
      // The 'offsetof' trick for calculating the size.
      let s:String = __flexAlloc(len);
      s._size = len;
      s._source = s;
      s._start = addressOf(s._data[0]);
      return s;
    }
  }

  /** Construct a string from a byte array. The byte array is presumed to contain character
      data encoded as UTF-8.
      Parameters:
        bytes: The byte array.
   */
  static def create(bytes:ubyte[]) -> String {
    let self = alloc(bytes.size);
    bytes.copyElements(addressOf(self._data[0]), 0, bytes.size);
    return self;
  }

  /** Construct a string from a copyable container of bytes. The bytes are presumed to
      contain character data encoded as UTF-8.
      Parameters:
        from: The container.
   */
  static def fromBytes(from:Copyable[ubyte]) -> String {
    let self = alloc(from.size);
    from.copyElements(addressOf(self._data[0]), 0, from.size);
    return self;
  }

  /** Construct a string from a subrange of a collection of bytes. The bytes are presumed
      to contain character data encoded as UTF-8.
      Parameters:
         from: The input collection.
        start: The starting index within the input collection.
        count: The number of bytes to use in constructing the string. Will be clamped
            to the end of the string if there are fewer than 'count' bytes following 'start'.
      Throws:
        IndexError - if 'start' is less than zero.
        ArgumentError - if 'count' is less than zero.
   */
  static def fromBytes(from:Copyable[ubyte], start:int, count:int) -> String {
    Preconditions.checkIndex(start >= 0);
    Preconditions.checkArgument(count >= 0);
    start = Math.min(start, from.size);
    count = Math.min(count, from.size - start);
    let self = alloc(count);
    from.copyElements(addressOf(self._data[0]), start, from.size);
    return self;
  }

  /** Construct a string from a subrange of another string. Note that the bytes that make
      up the string are shared between the two instances rather than copied.
      Parameters:
        bytes: The source string.
        start: The starting index within the byte array. This will be clamped to the
               end of the source string.
        count: The number of bytes to use in constructing the string. Will be clamped
                to the end of the string if there are fewer than 'count' bytes following 'start'.
      Throws:
        IndexError - if 'start' is less than zero.
        ArgumentError - if 'count' is less than zero.
   */
  static def create(str:String, start:int, count:int) -> String {
    Preconditions.checkIndex(start >= 0);
    Preconditions.checkArgument(count >= 0);
    start = Math.min(start, str.size);
    count = Math.min(count, str.size - start);
    let self:String = __flexAlloc(0);
    self._size = count;
    self._start = addressOf(str._data[start]);
    self._source = str._source;
    return self;
  }

  /** Construct a string from an array of characters.
      Parameters:
        chars: The character array.
        start: The starting index within the character array.
        count: The number of characters to use in constructing the string. Will be clamped
            to the end of the string if there are fewer than 'count' characters following 'start'.
      Throws:
        IndexError - if 'start' is less than zero.
        ArgumentError - if 'count' is less than zero.
        tart.text.encodings.InvalidCharacterError if an unencodable character was encountered.
   */
  static def create(chars:char[], start:int = 0, count:int = int.maxVal) -> String {
    let result = Codecs.UTF_8.encodedLength(chars, start, count);
    if result.state != Codec.CodecState.OK {
      throw InvalidCharacterError();
    }
    let self = alloc(result.dstCount);
    start = Math.min(start, chars.size);
    count = Math.min(count, chars.size - start);
    Codecs.UTF_8.encodeRaw(
        addressOf(self._data[0]), result.dstCount, addressOf(chars.data[start]), count);
    return self;
  }

  /** Construct a string from a native byte array. */
  @LinkageName("String_create")
  static def create(bytes:Address[ubyte], length:int) -> String {
    let self = alloc(length);
    Memory.arrayCopy(addressOf(self._data[0]), addressOf(bytes[0]), length);
    return self;
  }

  /** Explicitly convert values to String types. */
  static def create[%T] (value:T) -> String { return "<??>"; }

  /** Create a string from a type that has a 'toString' method. */
  static def create[%T <: HasToString] (value:T) -> String { return value.toString(); }

  /** Create a string from a subclass of 'Object' using the object's 'toString' method. */
  static def create(value:Object) -> String { return value.toString(); }

  /** 'true' if this is an empty string. */
  def isEmpty:bool {
    get { return self._size == 0; }
  }

  /** The length of the string in bytes. */
  def size:int { get { return self._size; } }

  /** Return true if this string starts with the substring 's'. */
  def startsWith(s:String) -> bool {
    if s.size > self._size {
      return false;
    }
    for i:int = 0; i < s.size; ++i {
      if s[i] != self._data[i] {
        return false;
      }
    }

    return true;
  }

  /** Return true if this string ends with the substring 's'. */
  def endsWith(s:String) -> bool {
    if s.size > self._size {
      return false;
    }
    let offset = self.size - s.size;
    for i:int = 0; i < s.size; ++i {
      if s[i] != self._data[i + offset] {
        return false;
      }
    }

    return true;
  }

  /** The length of the string in characters.
      Parameters:
        start: The starting byte index of the substring to measure.
        count: The length, in bytes, of the substring to measure.
   */
  def charLength(start:int = 0, count:int = int.maxVal) -> int {
    Preconditions.checkIndex(start >= 0 and count >= 0);
    start = Math.min(start, self._size);
    count = Math.min(count, self._size - start);
    let decodeResult = Codecs.UTF_8.decodedLengthRaw(
        addressOf(self._data[start]), count, Codec.ErrorAction.HALT);
    if decodeResult.state != Codec.CodecState.OK {
      throw InvalidCharacterError();
    }
    return decodeResult.dstCount;
  }

  /** Convert this string to a character array.
      Parameters:
        start: The starting byte index of the substring to convert.
        count: The length, in bytes, of the substring to convert.
   */
  def toCharArray(start:int = 0, count:int = int.maxVal) -> char[] {
    Preconditions.checkIndex(start >= 0 and count >= 0);
    start = Math.min(start, self._size);
    count = Math.min(count, self._size - start);
    let decodeResult = Codecs.UTF_8.decodedLengthRaw(
        addressOf(self._data[start]), count, Codec.ErrorAction.HALT);
    if decodeResult.state != Codec.CodecState.OK {
      throw InvalidCharacterError();
    }
    let result = char[](decodeResult.dstCount);
    Codecs.UTF_8.decodeRaw(
        addressOf(result.data[0]), decodeResult.dstCount,
        addressOf(self._data[start]), count, Codec.ErrorAction.HALT);
    if decodeResult.state != Codec.CodecState.OK {
      throw InvalidCharacterError();
    }
    return result;
  }

  /** Copy characters from this string into a character array.
      Parameters:
        index - the byte index into this string.
        dst - the destination character buffer.
        dstIndex - the starting index in the character buffer.
        dstLength - the maximum number of characters to copy.
      Returns: A tuple containing the number of characters actually copied,
        and the number of bytes read from the string.
      Throws:
        IndexError - if 'dstIndex' or 'index' are out of range.
        InvalidCharacterError - if 'index' is not the start of a valid UTF-8 character.
    */
  def getChars(index:int, dst:char[], dstIndex:int, dstLength:int) -> (int, int) {
    Preconditions.checkIndex(index >= 0 and dstIndex >= 0 and dstLength >= 0);
    index = Math.min(index, _size);
    dstIndex = Math.min(dstIndex, dst.size);
    dstLength = Math.min(dstLength, dst.size - dstIndex);
    let decodeResult = Codecs.UTF_8.decodeRaw(
        addressOf(dst.data[dstIndex]), dstLength,
        addressOf(_start[index]), _size - index,
        Codec.ErrorAction.HALT);
    if decodeResult.state != Codec.CodecState.OK {
      throw InvalidCharacterError();
    }
    return decodeResult.dstCount, decodeResult.srcCount;
  }

  /** 'true' if 's' is equal to to this string. */
  def equals(s:String) -> bool {
    if self._size != s._size {
      return false;
    }
    for i = 0; i < self._size; i++ {
      if self._start[i] != s._start[i] {
        return false;
      }
    }

    return true;
  }

  /** The index operator. */
  def [index:int]:ubyte {
    get {
      //Preconditions.verify[IndexOutOfRangeError](index < 0 or index >= len);
      return self._data[index];
    }
  }

  /** Converting a 'String' to a 'String' simply returns 'self'. */
  override toString -> String {
    return self;
  }

  /** Create a new 'String' object using a format string and a list of arguments.
      Parameters:
        formatString - the format string.
        args - the values to be substituted into the format string.
      Returns: the result of the format operation.
   */
  static def format(formatString:String, args:Object...) -> String {
    return formatString.format(args);
  }

  /** Create a new 'String' object using a format string and an array of arguments.
      Parameters:
        formatString - the format string.
        args - the values to be substituted into the format string.
      Returns: the result of the format operation.
   */
  static def format(formatString:String, args:Object[]) -> String {
    return formatString.format(args);
  }

  /** Create a new 'String' object using this 'String' as the format string.
      Parameters:
        args - the values to be substituted into the format string.
      Returns: the result of the format operation.
   */
  def format(args:Object...) -> String {
    return format(args);
  }

  /** Create a new 'String' object using this 'String' as the format string.
      Parameters:
        args - the values to be substituted into the format string.
      Returns: the result of the format operation.
   */
  def format(args:Object[]) -> String {
    return StringFormatter(self, args).toString();
  }

  /** Degenerate form of concat which takes a single string.
      Parameters:
        s - the input string.
      Returns: the input string.
   */
  static def concat(s:String) -> String {
    return s;
  }

  /** Concatenate a list of strings.
      Parameters:
        s - the list of strings to concatenate.
      Returns: the concatenation of the input strings.
   */
  @Associative
  static def concat(s:String...) -> String {
    return concat(s);
  }

  /** Concatenate a list of strings.
      Parameters:
        s - an 'Iterable' which returns the strings to be concatenated.
      Returns: the concatenation of the input strings.
   */
  @Associative
  static def concat(strings:Iterable[String]) -> String {
    var length:int = 0;
    for s in strings {
      length += s._size;
    }

    let result = alloc(length);
    var index = 0;
    for s in strings {
      Memory.arrayCopy(addressOf(result._data[index]), s._start, s._size);
      index += s._size;
    }

    return result;
  }

  /** Join together a list of strings using this string as a separator.
      Parameters:
        s - the list of strings to join.
      Returns: the joined string.
   */
  def join(s:String...) -> String {
    return String.join(self, s);
  }

  /** Join together a list of strings using this string as a separator.
      Parameters:
        s - an 'Iterable' which produces the strings to join.
      Returns: the joined string.
   */
  def join(strings:Iterable[String]) -> String {
    return String.join(self, strings);
  }

  /** Join together a list of strings with a separator string.
      Parameters:
        sep - the separator string which is inserted between each pair of input strings.
        s - the list of strings to join.
      Returns: the joined string.
   */
  static def join(sep:readonly(String), s:String...) -> String {
    return String.join(sep, s);
  }

  /** Join together a list of strings with a separator string.
      Parameters:
        sep - the separator string which is inserted between each pair of input strings.
        s - an 'Iterable' which produces the strings to join.
      Returns: the joined string.
   */
  static def join(sep:readonly(String), strings:Iterable[String]) -> String {
    let sepSize = sep.size;
    var length:int = 0;
    for s in strings {
      if length != 0 {
        length += sepSize;
      }
      length += s._size;
    }

    let result = alloc(length);
    var index = 0;
    for s in strings {
      if index != 0 {
        Memory.arrayCopy(addressOf(result._data[index]), addressOf(sep._data[0]), sepSize);
        index += sepSize;
      }
      Memory.arrayCopy(addressOf(result._data[index]), addressOf(s._data[0]), s._size);
      index += s._size;
    }

    return result;
  }

  /** Return a new 'String' which containing all of the characters between 'beginIndex'
      and 'endIndex'.
      Parameters:
        beginIndex - the starting index of the substring. This value will be clamped to
                     the end of the string.
        endIndex - the ending index of the substring. This value will be clamped to the
                   end of the string.
      Returns: the substring.
      Throws:
        IndexError - if 'beginIndex' is less than zero.
        ArgumentError - if 'endIndex' is less than 'beginIndex'.
   */
  def substr(beginIndex:int, endIndex:int) -> String {
    return String(self, beginIndex, endIndex - beginIndex);
  }

  /** Return a new 'String' containing all of the characters starting from position
      'beginIndex' until the end of the string.
      Parameters:
        beginIndex - the starting index of the substring.
        endIndex - the ending index of the substring.
      Returns: the substring.
      Throws:
        IndexError - if 'beginIndex' is less than zero.
   */
  def substr(beginIndex:int) -> String {
    return String(self, beginIndex, self._size);
  }

  /** Given a byte index into the string, return the character at the given index,
      as well as the byte index of the next character. */
  def nextCh(index:int) -> (char, int) {
    return Codecs.UTF_8.decodeOne(_start, index, _size);
  }

  /** Given a byte index into the string, return the character at the given index. */
  def charAt(index:int) -> char {
    return Codecs.UTF_8.decodeOne(_start, index, _size)[0];
  }

  /** Return the value of this string, converted to upper case. */
  def toUpperCase -> String {
    var sb = StringBuilder(_size);
    for ch in iterate() {
      sb.append(Character.toUpperCase(ch));
    }
    return sb.toString();
  }

  /** Return the value of this string, converted to lower case. */
  def toLowerCase -> String {
    var sb = StringBuilder(_size);
    for ch in iterate() {
      sb.append(Character.toLowerCase(ch));
    }
    return sb.toString();
  }

  /** A protocol for types that have a 'toString' method. */
  protocol HasToString {
    def toString() -> String;
  }

  /* Implicitly convert values to String types. */
  //static def coerce[%T] (value:T) -> String { return "<??>"; }
  static def coerce[%T <: HasToString] (value:T) -> String { return value.toString(); }
  static def coerce(value:Object) -> String { return value.toString(); }

  /** Return an immutable buffer representation of this string's data. */
  def asBuffer() -> Memory.Buffer[ubyte] {
    return Memory.Buffer[ubyte](self, _start, _size);
  }

  /** Compute a hash value for this string. */
  override computeHash -> uint64 {
    return Hashing.hash(asBuffer());
  }

  /** Iterate over the characters in this string. */
  def iterate -> Iterator[char] {
    return StringIterator(self);
  }

  /** String iterator class. */
  private final class StringIterator : Iterator[char] {
    private {
      let str:String;
      var index:int;
    }

    def construct(str:String) {
      self.str = str;
      self.index = 0;
    }

    def next -> char or void {
      var charVal:char;
      if index < str._size {
        charVal, index = str.nextCh(index);
        return charVal;
      } else {
        return;
      }
    }
  }
}

/** Equality comparison operator for strings. */
public def infixEqual(s1:String, s2:String) -> bool {
  return s1.equals(s2);
}

/** Addition operator for strings. */
public macro infixAdd(s1:String, s2:String) -> String {
  return String.concat(s1, s2);
}
