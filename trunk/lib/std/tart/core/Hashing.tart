import tart.core.Memory.Address;
import tart.core.Memory.addressOf;
import tart.core.Memory.reinterpretPtr;

/** Various useful hash functions. */
namespace Hashing {
  // Hash functions based on MurmurHash 2.0 by Austin Appleby.

  /** Hash functor that calls computeHash(). */
  struct HashFn[%T <: Hashable] {
    def hash(value:T) -> uint64 {
      return value.computeHash();
    }
  }

  /*struct HashFn[int32] {
    def hash(value:int32) {
      return Hashing.hash(value);
    }
  }*/

  /** Hash a single 32-bit integer. */
  def hash(value:uint32) -> uint32 {
    return murmurHash(value);
  }

  /** Hash a single 64-bit integer. */
  def hash(value:uint64) -> uint64 {
    return murmurHash(value);
  }

  /** Hash a pointer. */
  def hash[%T](value:Address[T]) -> uint64 {
    return murmurHash(reinterpretPtr[T, void](value));
  }

  /** Hash a buffer of bytes. */
  def hash(buffer:Memory.Buffer[ubyte]) -> uint64 {
    return murmurHash(buffer);
  }

  let M32:uint32 = 0x5bd1e995;
  let M64:uint64 = 0xc6a4a7935bd1e995;

  /** Hash a single 32-bit integer. */
  def murmurHash(key:uint32, seed:uint32 = 0) -> uint32 {
    var h:uint32 = seed ^ 1;
    key *= M32;
    key ^= key >> 24;
    key *= M32;

    h *= M32;
    h ^= key;

    h ^= h >> 13;
    h *= M32;
    h ^= h >> 15;

    return h;
  }

  /** Hash a single 64-bit integer. */
  def murmurHash(key:uint64, seed:uint64 = 0) -> uint64 {
    let R:uint64 = 47;

    var h:uint64 = seed ^ M64;
    key *= M64;
    key ^= key >> R;
    key *= M64;

    h ^= key;
    h *= M64;

    h ^= h >> R;
    h *= M64;
    h ^= h >> R;

    return h;
  }

  /** Hash a pointer. */
  def murmurHash(key:Address[void]) -> uint64 {
    return murmurHash(Memory.ptrToInt(key));
  }

  /** Hash a byte buffer segment. */
  def murmurHash(buffer:Memory.Buffer[ubyte], seed:uint32 = 0) -> uint64 {
    return murmurHash(buffer.begin, buffer.end, seed);
  }

  /** Hash a region of memory. */
  def murmurHash(first:Address[ubyte], last:Address[ubyte], seed:uint32 = 0) -> uint64 {
    if true {  // TODO: Change to config.allowUnalignedRead
      let R:uint64 = 47;
      var len:int64 = Memory.ptrDiff(first, last);
      var h:uint64 = seed ^ (uint64(len) * M64);
      var data:readonly(Address[uint64]) = reinterpretPtr(first);
      var end:readonly(Address[uint64]) = addressOf(data[len / 8]);

      while data is not end {
        var k:uint64 = Memory.deref(data);
        data += 1;

		    k *= M64;
		    k ^= k >> R;
		    k *= M64;

		    h ^= k;
		    h *= M64;
      }

      if (len & 7) != 0 {
	      var data2:readonly(Address[ubyte]) = reinterpretPtr(data);
	      if (len & 4) != 0 {
	        let d:readonly(Address[uint32]) = reinterpretPtr(data2);
	        data2 += 4;
	        h ^= uint64(Memory.deref(d)) << 32;
	      }

	      if (len & 2) != 0 {
	        let d:readonly(Address[uint16]) = reinterpretPtr(data2);
	        data2 += 2;
	        h ^= uint64(Memory.deref(d)) << 16;
	      }

	      if (len & 1) != 0 {
	        let d:readonly(Address[uint8]) = reinterpretPtr(data2);
	        data2 += 1;
	        h ^= uint64(Memory.deref(d)) << 8;
	      }

        h *= M64;
      }

		  h ^= h >> R;
		  h *= M64;
		  h ^= h >> R;

		  return h;
    }

    return 0;
  }

  /** An incremental hasher. */
  struct Hasher {
    private {
      var hash:uint32;
      var tail:uint32;
      var count:uint32;
      var size:uint32;
    }

    def construct(seed:uint32 = 0) {
      hash = seed;
      tail = count = size = 0;
    }
  }
}
