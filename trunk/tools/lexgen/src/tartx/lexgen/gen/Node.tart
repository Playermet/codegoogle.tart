import tart.collections.List;
import tart.collections.ArrayList;
import tartx.lexgen.shared.Location;

/** A node in the syntax graph. */
abstract class Node {
  enum NodeType {
    MATCH_CHARACTERS,
    MATCH_DOT,
    ACCEPTOR,
    ACTION,
    CONCAT,
    LITERAL,
    ALTERNATIVE,
    COMPLEMENT,
    OPTIONAL,
    ZERO_OR_MORE,
    ONE_OR_MORE,
    PRODUCTION,
    SUB_RULE,
    TOKEN_REF,
    STATE,
    PARAM,
  }
  
  @Flags enum NodeFlags {
    NULLABLE,
    TERMINATING,
    GREEDY
  }
  
  let nodeType:NodeType;
  
  // Linked list pointers
  var childNodes:List[Node] = ArrayList[Node]();
  //var firstChild:optional Node = null;
  //var lastChild:optional Node = null;
  //var nextSibling:optional Node = null;
  var namedRef:optional Node = null;

	// Source location  
  var location:Location;
  
  // Node values
  var name:optional String;
  var value:optional Object;
  
  // Node flags
  var flags:NodeFlags = 0;
  var cycleCheck:bool = false;
  
  // Unique ID of this node
	var label:int;
	
	def construct(nodeType:NodeType, location:Location) {
	  self.nodeType = nodeType;
	  self.location = location;
	}
	
	def append(n:Node) {
	  childNodes.add(n);
	}
	
	def clear() {
	  childNodes.clear();
	}
}
