// ------------------------------------------------------------------------

Next up:

* Qualified types:
  * Finish conversion to Qualified<>
  * Start implementing conversion rules.
* Fix DWARF.
  * local vars - why don't they work.
* How to restrict a template to just an enum or an integer type?
* GC: Bug in collection of global vars.
* Fix bug in nametable static roots.
* Start work on readonly / mutable / immutable type constructors and value casts.
* String should take from Collection, not Copyable.
* Type inference
  * Pre-cull candidates that can never be chosen
  * Finish moving classes to Sema/Infer
  * can use additional refactoring / simplification I think.

* Deduce argument types and return types for anon funcs.
* Implement Attribute.Retention.RUNTIME_ITERABLE.
* @ReflectOnly (non-propagating reflection.)
* statements returning values: do try/catch. Also unsized ints.

Design TODOS:

* Const:
  * readonly / mutable / immutable
  * syntax is readonly(int)
  * ImmutableList should derive from immutable(List) or readonly(List)?
* Need a way to collect all declarations that a given attribute is assigned to.
* With-statement multiple vars and tuple unpacking.

Hard problems:

  -- Dynamic linking.
  -- Exception backtrace
  -- Dynamic reification of types.

More things to do:

  -- Get static ctors working.
  -- BitTricks tests.
  -- Static If
  -- Compile-time configuration options. @TargetProperty.
  -- Exception backtrace.
  -- Hashing of integers

Implementation TODOS:

* Labeled break and continue statements.
* Add structure compares. (And tuple compares, and so on for all types.)
* Coalesced templates
* Finish @Associative.
* Implicit anonymous class for closure.
* TEST: Bug: uint64 + int64 != float (error in infix add overload selection).
* TEST: Fix problems with eclipse update site.
* Eclipse plugin:
  * Make whitespace trimming not affect cursor position.
  * Show right margin.
* Refactoring
  * Use a type to represent variadic params.
  * Some means to cache relabeled specializations?
  * Finish up override keyword, with failure tests.
  * Unit tests for lexical type ordering.
* I/O library.
  * Think about async i/o.
* typecast[type](in);
  * More tests - reference types, null pointers. (Union types are done)
* Reflection
  * Struct Constructors
  * Properties and fields.
  * Class members.
  * Find all properties/functions having some attribute
* Profiling.
* Test overloading of augmented assignment operators.
* Override for property getters and setters. (I think that's done.)
* Finish array unit tests. (One test remaining)
* Proxy types.
* Enum types
  * Enum operators (relational).
  * test bitwise operators for flag enums.
  * .parse or valueOf.
  * Add a unit test for converting invalid enum values to strings.
  * Fix coercion of enum values to objects.
* Tuple types
  * Test struct members, params.
  * Member-wise conversions.
* Constructors
  * Insure that constructor calls aren't recursive.
  * Insure that we can't call constructors from non-constructor functions.
  * Allow overloading of constructors with functions, but don't allow two classes
    with the same template args.
  * Classes with create still need a default constructor? (Unless undef'd).
  * Get default ctor working again (and call super ctor).
* Import-as.
* Strings
  * Conversion specs.
  * Define toStringFmt() - custom string formatting.
  * Other string-related functions
  * text functions - substr, etc. (Character classes, need unicode stuff)
  * Unicode character class tests.
* Let with instance scope.
  * Insure that it cannot be assigned to in non-constructor.
* Disjoint types
  * Equality comparison (with member types, and with other disjoint types.)
* Type strengthening - could potentially reduce the number of vcalls and icalls (greatly).
* AttributeSite failure tests.
* Class "extension"
* Statements:
  * with (what interface for using?)
  * yield
  * fork/threading primitives
* Command-line parsing lib.
* Ranges
  * Need syntax for open, closed, and half-open intervals.
  * Literals
  * As array slice indices
  * As tuple slice indices
  * Indefinite ranges (n ..) and (.. n) ?
* Generic functions.
  * 'virtual' arguments for multi-methods. (Or 'dispatched')
* Complex typecast operations should probably go into their own separate functions
  instead of being inline.
* Map literals -> Map.of((a, b)) or Map.of(a => b, c => d) where '=>' means 2-tuple.
* Matrix literals + Matrix class.
* Anonymous inner classes.
* Implement BoundMethodExpr as an implementation of Function.
* Insure typealiases aren't circular.
* Sphinx domain for Tart? (Need a more recent Sphinx)
* Garbage collection test for uninitialized array elements.
* Insure last field of base class isn't a flex array.
* If an if statement casts a nullable to non-nullable type, then assume non-nullable in then block.
  (Same for while).
* Change assignment syntax for tuple unpacking (x:type, y:type).
* Need a way to create an empty value for all types.
* Namespace merging.

* Collector classes:
  * TLAB
  * LinearAllocator
  * Eden
    * Linked-list of TLABs.
    * Lock for the TLAB list.
      * Each TLAB is 32k.
      * Eden size is 2 + 2 * numThreads TLABS.
      * TLABS do not need to be contiguous
      * Thread local ptr to TLAB.
  * SS1 and SS2. These have SSABs. = 50% Eden size.
  * SSAB.
  * Problems to solve:
    Still need to know how to mark objects in different spaces.
  * Some way to import C++ data structures into Tart - for things like pthreads.
  
Doc errors:

* Fix operator overload syntax (infixX notation used now.)
* Fix description of imports to match current functionality.
* Array literals
* Better explanation of unpacking
* First line of Macro section is misleading.

Error TODOS: (things that should be an error)

* Module with multiple public names at top level.
* Assignment to a non-lvalue.
* Template functions cannot be extern.
* Enforce 'readonly'
* LValueExpr.isSideEffectFree may not be true for property
  // Check for hiding similarly-named variable.

// ------------------------------------------------------------------------

Command to create Eclipse project:

cmake -G"Eclipse CDT4 - Unix Makefiles" -D CMAKE_BUILD_TYPE=Debug -D ECLIPSE_CDT4_GENERATE_SOURCE_PROJECT=TRUE -D LLVM_CONFIG=$HOME/Projects/llvm-inst/bin/llvm-config ../trunk/

Command to create Makefile project:

cmake -D CMAKE_BUILD_TYPE=Debug -D LLVM_INCLUDE_DIR=$HOME/Projects/llvm-inst/include -D LLVM_LIBRARY_DIR=$HOME/Projects/llvm-inst/lib ../trunk/

cmake -G"Xcode" -D CMAKE_BUILD_TYPE=Debug -D LLVM_INCLUDE_DIR=$HOME/Projects/llvm-inst/include -D LLVM_LIBRARY_DIR=$HOME/Projects/llvm-inst/lib ../trunk/

cmake -G "Visual Studio 10 2010" -D CMAKE_BUILD_TYPE=Debug -D LLVM_INCLUDE_DIR=C:\Users\Talin\Projects\llvm-inst\include -D LLVM_LIBRARY_DIR=C:\Users\Talin\Projects\llvm-inst\lib ..\tart\trunk

cmake -D CMAKE_BUILD_TYPE=Debug -D CMAKE_INSTALL_PREFIX=/home/talin/Projects/llvm-inst ../llvm
cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/home/talin/Projects/llvm-inst ../llvm

// ------------------------------------------------------------------------

Link-time code generation?

// ------------------------------------------------------------------------

namespace Numbers {
  protocol PrimitiveNumber<T> {
    let minVal:T;
    let maxVal:T;
  }
  
  protocol PrimitiveInt<T> : PrimitiveNumber<T> {}
  protocol PrimitiveFloat<T> : PrimitiveNumber<T> {}
  
  protocol_map PrimitiveInt<byte> {
    let minVal:byte = -128;
    let maxVal:byte = 127;
  }

  protocol_map PrimitiveInt<short> {
    let minVal:short = 0;
    let maxVal:short = 0x7fff;
  }
  
  // This 'extend' idea is not bad. The main problem is how to represent it
  // in the compiler. We don't want to modify the original class, nor do we
  // want to interfere with the lookup of the original class.
  //
  // The rules of 'extend' are as follows:
  //
  // 1) Only protocols can be added as base classes.
  // 2) Only static or final methods can be added as methods.
  // 3) Only static or final properties can be added as properties.
  // 4) Only constants can be added as member variables.
  //
  // In other words, nothing can be added that alters the runtime representation
  // of the object.
  //
  // In some ways, this is equivalent to saying:
  //
  // class byte : byte, PrimitiveInt {
  //   let minVal:byte = -128;
  //   let maxVal:byte = 127;
  // }
  //
  
  extend byte : PrimitiveInt {
  }

  extend short : PrimitiveInt {
  }
}

// ------------------------------------------------------------------------

flags:

  static var OutputFile = StringOption("o",
      altName="output",
      varName="output file",
      help="Path to output file"); 

abstract def foo(virtual k:Object);

override Module.foo(k:String) {
}

// ------------------------------------------------------------------------

// Chained setter notation

object
  .(field1 = value)
  .(field2 = value)
  .build()

// ------------------------------------------------------------------------

// Redo Type::getHashCode();
// CountingIterator is really inefficient. Why?
// Derived types for reflection can be deserialized in random order.

// ------------------------------------------------------------------------

Type reification:

Idea #0: We need to find every example of where we actually need to have
ad-hoc polymorphism. (Protocols?)

  * Hashing of primitive types.

Idea #1: Make a bare template parameter really mean [T <: __Any].

  -- Redo templates so that template parameters really are opaque.

// ------------------------------------------------------------------------

tart.gc.Finalizer;

abstract class Finalizer {
  private {
    var target: Object;
  }
  
  @TraceMethod def trace {}
  
  abstract def finalize;
}

// ------------------------------------------------------------------------

// Thoughts on a different dispatch algorithm.

struct MethodInfoBlock {
  struct Entry {
    let typeId:uint32;
    let method:MethodPtr; 
  }
  
  // TODO: Support registration

  let size_:int;
  let entries_:FlexibleArray[Entry];
}

let methodTable:HashTable[MethodLookup, MethodPtr];

// No, these two should not be combined.
struct MethodLookup {
  // Unique key of the method (name + defining class + static param types.)
  // This should be a table by itself.
  let methodId:uint;
  // List of dynamic argument types.
  // Hash code precomputed per type.
  let methodParams:FlexibleArray[TypeInfoBlock^];
}

ClassRegistry

// ------------------------------------------------------------------------

Notes on object pinning:

class Pin[%T] : ScopedObject {
  private {
    let _source:T;
    let _value:T;
    
    static def makePinned(obj:T) -> T {
      var size = GC.objectSize(obj);
      // allocate this object on the global heap
      // Copy all of the object data
      // set the pinned bit
      // return the object address
    }
  }
  
  def construct(sourceObj:T) {
    self._soureObj = sourceObj;
    self._pinnedObj = if GC.isPinned(sourceObj) { sourceObj } else { makePinned(sourceObj) };
  }
  
  def sourceObj:T { get { return _sourceObj; }
  def value:T { get { return _pinnedObj; } }
  
  def enterScope() {}
  def exitScope() {
    if _sourceObj is not _pinnedObj {
      // Copy all the object data from _pinnedObj to _sourceObj
      // Unset the _pinned bit on _pinnedObj
    }
  }
}

Usage:

  with pinnedArray = GC.pin(array) {
    with GC.suspension() {
      read(pinnedArray.value, offset, count);
    }
  }

  with pinnedArray = GC.pin(array), GC.suspension() {
  }

class PinnedArray[%T] : ScopedObject {
}

// ------------------------------------------------------------------------

Ranges:

namespace Range {
  struct Open {
  }

  struct Open[int] : Iterable[int] {
    let begin:int;    ///< Start of the range. (exclusive)
    let end:int;      ///< End of the range. (exclusive)
    
    def contains(value:int) {
      
    }
  }
  
  struct Open[double] {
    let begin:double;  ///< Start of the range. (exclusive)
    let end:double;    ///< End of the range. (exclusive)
  }
  
  struct Closed[int] : Iterable[int] {
    let begin:int;    ///< Start of the range. (exclusive)
    let end:int;      ///< End of the range. (exclusive)
    
    def contains(value:int) {
      return value >= begin and value <= end;
    }
    
    def iterate -> Iterator[int] {
    }
  }
  
  struct Closed[double] {
    let begin:double;  ///< Start of the range. (exclusive)
    let end:double;    ///< End of the range. (exclusive)

    def contains(value:int) {
      return value >= begin and value <= end;
    }
  }
  
  struct HalfOpen : Iterable[int] {
  }
}

// ------------------------------------------------------------------------

Thoughts on FFI (Foreign Function Interface):

Annotations:
  CString - function returns a char * pointer.
  CWideString - function returns a wchar_t * pointer.
  CMallocString - function returns a char * pointer which can be free()'d.
  CMallocWideString - function returns a wchar_t * pointer which can be free()'d.
  CArray - function requires a C-style array pointer.
  CPinnedArray - function requires a pinned C-style array pointer.

  Suspension - a scoped object which starts and stops a sync point. (acquire / release)

import tart.ffi.CString;
import tart.ffi.CMallocString;

// Indicates that the external function returns a zero-terminated string whose
// storage has been malloc'd, and which can be freed.
@Extern("getcwd") @CMallocString def getcwd() -> String;

// Indicates that the function returns a string via a buffer which is passed
// in as an argument. This takes care of any pinning that needs to be done.
@Extern("getcwd") def getcwd(@CArray buffer:ubyte[]);

